/*
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// PdfReduceParameters Represents the parameters for a reduce action.
type PdfReduceParameters struct {
	// The identifier of the previously uploaded file to be processed.
	FileId string `json:"FileId"`
	OutputVersion PdfVersion `json:"OutputVersion,omitempty"`
	ImageQuality ImageQuality `json:"ImageQuality,omitempty"`
	// Specifies whether the images from the PDF shall be recompressed.
	RecompressImages bool `json:"RecompressImages,omitempty"`
	// Specifies whether color detection must be performed on the images from the PDF.
	EnableColorDetection bool `json:"EnableColorDetection,omitempty"`
	// Specifies whether the PDF shall be packed when saved in order to reduce its size.
	PackDocument bool `json:"PackDocument,omitempty"`
	// Specifies whether the PDF fonts must be packed in order to reduce their size.
	PackFonts bool `json:"PackFonts,omitempty"`
	// Specifies whether the images from the PDF shall be downscaled.
	DownscaleImages bool `json:"DownscaleImages,omitempty"`
	// Specifies the resolution to be used to downscale images.
	DownscaleResolution int32 `json:"DownscaleResolution,omitempty"`
	// Specifies whether the PDF shall be optimized for online distribution.
	FastWebView bool `json:"FastWebView,omitempty"`
	// Specifies whether the form fields shall be removed from the PDF.
	RemoveFormFields bool `json:"RemoveFormFields,omitempty"`
	// Specifies whether the annotations shall be removed from the PDF.
	RemoveAnnotations bool `json:"RemoveAnnotations,omitempty"`
	// Specifies whether the bookmarks shall be removed from the PDF.
	RemoveBookmarks bool `json:"RemoveBookmarks,omitempty"`
	// Specifies whether the hyperlinks shall be removed from the PDF.
	RemoveHyperlinks bool `json:"RemoveHyperlinks,omitempty"`
	// Specifies whether the embedded files shall be removed from the PDF.
	RemoveEmbeddedFiles bool `json:"RemoveEmbeddedFiles,omitempty"`
	// Specifies whether the blank pages shall be removed.
	RemoveBlankPages bool `json:"RemoveBlankPages,omitempty"`
	// Specifies whether the JavaScript shall be removed.
	RemoveJavaScript bool `json:"RemoveJavaScript,omitempty"`
	// Specifies whether the JPEG2000 compression scheme shall be used to compress the images of the PDF.
	EnableJPEG2000 bool `json:"EnableJPEG2000,omitempty"`
	// Specifies whether the JBIG2 compression scheme shall be used to compress the bitonal images of the PDF.
	EnableJBIG2 bool `json:"EnableJBIG2,omitempty"`
	// Specifies whether characters repairing shall be performed during bitonal conversion.
	EnableCharRepair bool `json:"EnableCharRepair,omitempty"`
	// Specifies whether MRC shall be used for compressing the PDF contents.
	EnableMRC bool `json:"EnableMRC,omitempty"`
	// Specifies if the MRC engine shall try to preserve smoothing between different layers.
	PreserveSmoothing bool `json:"PreserveSmoothing,omitempty"`
	// Specifies the resolution for downscaling the background layer by the MRC engine, if any.
	DownscaleResolutionMRC int32 `json:"DownscaleResolutionMRC,omitempty"`
	// Specifies whether the metadata shall be removed.
	RemoveMetadata bool `json:"RemoveMetadata,omitempty"`
	// Specifies whether the page thumbnails shall be removed.
	RemovePageThumbnails bool `json:"RemovePageThumbnails,omitempty"`
	// Specifies whether the page PieceInfo dictionary used to hold private application data shall be removed.
	RemovePagePieceInfo bool `json:"RemovePagePieceInfo,omitempty"`
	// Specifies the threshold value for the JBIG2 encoder pattern matching and substitution between 0 and 1. Any number lower than 1 may lead to lossy compression.
	JBIG2PMSThreshold float32 `json:"JBIG2PMSThreshold,omitempty"`
}
