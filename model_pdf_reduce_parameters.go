/*
 * PassportPDF API
 *
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// PdfReduceParameters Represents the parameters for a reduce action.
type PdfReduceParameters struct {
	// The identifier of the previously uploaded file to be processed.
	FileId string `json:"FileId"`
	OutputVersion PdfVersion `json:"OutputVersion,omitempty"`
	ImageQuality ImageQuality `json:"ImageQuality,omitempty"`
	// Specifies whether the images from the PDF shall be recompressed.
	RecompressImages bool `json:"RecompressImages,omitempty"`
	// Specifies whether color detection must be performed on the images from the PDF.
	EnableColorDetection bool `json:"EnableColorDetection,omitempty"`
	// Specifies whether the PDF shall be packed when saved in order to reduce its size.
	PackDocument bool `json:"PackDocument,omitempty"`
	// Specifies whether the PDF fonts must be packed in order to reduce their size.
	PackFonts bool `json:"PackFonts,omitempty"`
	// Specifies whether the images from the PDF shall be downscaled.
	DownscaleImages bool `json:"DownscaleImages,omitempty"`
	// Specifies the resolution to be used to downscale images.
	DownscaleResolution int32 `json:"DownscaleResolution,omitempty"`
	// Specifies whether the PDF shall be optimized for online distribution.
	FastWebView bool `json:"FastWebView,omitempty"`
	// Specifies whether the form fields shall be removed from the PDF.
	RemoveFormFields bool `json:"RemoveFormFields,omitempty"`
	// Specifies whether the annotations shall be removed from the PDF.
	RemoveAnnotations bool `json:"RemoveAnnotations,omitempty"`
	// Specifies whether the bookmarks shall be removed from the PDF.
	RemoveBookmarks bool `json:"RemoveBookmarks,omitempty"`
	// Specifies whether the hyperlinks shall be removed from the PDF.
	RemoveHyperlinks bool `json:"RemoveHyperlinks,omitempty"`
	// Specifies whether the embedded files shall be removed from the PDF.
	RemoveEmbeddedFiles bool `json:"RemoveEmbeddedFiles,omitempty"`
	// Specifies whether the blank pages shall be removed.
	RemoveBlankPages bool `json:"RemoveBlankPages,omitempty"`
	// Specifies whether the JavaScript shall be removed.
	RemoveJavaScript bool `json:"RemoveJavaScript,omitempty"`
	// Specifies whether the JPEG2000 compression scheme shall be used to compress the images of the PDF.
	EnableJPEG2000 bool `json:"EnableJPEG2000,omitempty"`
	// Specifies whether the JBIG2 compression scheme shall be used to compress the bitonal images of the PDF.
	EnableJBIG2 bool `json:"EnableJBIG2,omitempty"`
	// Specifies whether characters repairing shall be performed during bitonal conversion.
	EnableCharRepair bool `json:"EnableCharRepair,omitempty"`
	// Specifies whether MRC shall be used for compressing the PDF contents.
	EnableMRC bool `json:"EnableMRC,omitempty"`
	// Specifies if the MRC engine shall try to preserve smoothing between different layers.
	PreserveSmoothing bool `json:"PreserveSmoothing,omitempty"`
	// Specifies the resolution for downscaling the background layer by the MRC engine, if any.
	DownscaleResolutionMRC int32 `json:"DownscaleResolutionMRC,omitempty"`
	// Specifies whether the metadata shall be removed.
	RemoveMetadata bool `json:"RemoveMetadata,omitempty"`
	// Specifies whether the page thumbnails shall be removed.
	RemovePageThumbnails bool `json:"RemovePageThumbnails,omitempty"`
	// Specifies whether the page PieceInfo dictionary used to hold private application data shall be removed.
	RemovePagePieceInfo bool `json:"RemovePagePieceInfo,omitempty"`
	// Specifies the threshold value for the JBIG2 encoder pattern matching and substitution between 0 and 1. Any number lower than 1 may lead to lossy compression.
	JBIG2PMSThreshold float32 `json:"JBIG2PMSThreshold,omitempty"`
}
