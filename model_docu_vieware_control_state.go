/*
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// DocuViewareControlState Specifies configuration and appearance state of a DocuVieware control.
type DocuViewareControlState struct {
	// Specifies the amount of time, in minutes, allowed between requests before the DocuVieware session-state provider terminates the session.<br />
	Timeout int32 `json:"Timeout,omitempty"`
	// Specifies client the identifier associated with the control.
	ControlID *string `json:"ControlID,omitempty"`
	// Specifies if the DocuVieware logo is displayed in the toolbar.
	ShowLogo bool `json:"ShowLogo,omitempty"`
	// Specifies the remote IP. This property can be leaved empty if user requests don't need to be traced.
	RemoteIP *string `json:"RemoteIP,omitempty"`
	FileHostingURI *string `json:"FileHostingURI,omitempty"`
	// Specifies the URI of a document to load into the control.  This can be an empty string if a document is already loaded.  Use the prefix 'fileid:' to load a document from a file ID handled by PassportPDF. ie: 'fileid:00000-00000-00000-00000-00000'.
	DocumentURI *string `json:"DocumentURI,omitempty"`
	// Specifies the file name of the input document. The file name can help to determine the input document format.  Default value is an empty string.
	DocumentFileName *string `json:"DocumentFileName,omitempty"`
	// A flag specifying if the control should display a loading progress status bar to the end user while a document is being loaded.
	DisableDownloadProgress bool `json:"DisableDownloadProgress,omitempty"`
	DocumentAlignment DocumentAlignment `json:"DocumentAlignment,omitempty"`
	DocumentPosition DocumentPosition `json:"DocumentPosition,omitempty"`
	// Specifies if GdPicture/XMP annotations support is activated.
	EnableGdPictureAnnotations bool `json:"EnableGdPictureAnnotations,omitempty"`
	// Specifies whether printing support is disabled for annotations.
	DisableAnnotationPrinting bool `json:"DisableAnnotationPrinting,omitempty"`
	// Specifies whether form fields can be edited into the client browser or not.
	EnableFormFieldsEdition bool `json:"EnableFormFieldsEdition,omitempty"`
	// Specifies the editor mode for the GdPicture/XMP annotation support.<br />
	AnnotationEditorMode bool `json:"AnnotationEditorMode,omitempty"`
	LinkAnnotationClickBehaviour LinkAnnotationClickBehaviour `json:"LinkAnnotationClickBehaviour,omitempty"`
	// Specifies the current factor of zoom applied during page rendering operations: 1 for 100%, 1.5 for 150%, 2 for 200%...
	Zoom float64 `json:"Zoom,omitempty"`
	ZoomMode ViewerZoomMode `json:"ZoomMode,omitempty"`
	OpenZoomMode ViewerZoomMode `json:"OpenZoomMode,omitempty"`
	ViewRotation RotateFlip `json:"ViewRotation,omitempty"`
	PageRotation RotateFlip `json:"PageRotation,omitempty"`
	// Defines the percentage of increasing or decreasing level of zoom for 'Zoom In' and 'Zoom Out' operations.
	ZoomStep int32 `json:"ZoomStep,omitempty"`
	// Specifies whether scrollbars can be displayed or not within the viewer.<br />
	ScrollBars bool `json:"ScrollBars,omitempty"`
	// Specifies whether the viewer shall always show scrollbars.
	ForceScrollBars bool `json:"ForceScrollBars,omitempty"`
	PageViewMode PageViewMode `json:"PageViewMode,omitempty"`
	// Specifies if text selection is permitted.
	EnableTextSelection bool `json:"EnableTextSelection,omitempty"`
	// Specifies whether the selected text context menu options should contain annotations entries.
	EnableTextSelectionAnnotation bool `json:"EnableTextSelectionAnnotation,omitempty"`
	Locale DocuViewareLocale `json:"Locale,omitempty"`
	// Specifies the different languages used by the user's browser.
	UserLanguages *[]string `json:"UserLanguages,omitempty"`
	// Specifies the width of the control within its container.
	ControlWidth *string `json:"ControlWidth,omitempty"`
	// Specifies, the height of the control within its container.
	ControlHeight *string `json:"ControlHeight,omitempty"`
	// Specifies whether GdPicture/XMP annotations are rendered with a drop shadow effect.
	AnnotationDropShadow bool `json:"AnnotationDropShadow,omitempty"`
	// Specifies whether printing is allowed.
	AllowPrint bool `json:"AllowPrint,omitempty"`
	// Specifies whether file upload is allowed.
	AllowUpload bool `json:"AllowUpload,omitempty"`
	// Specifies whether multiple thumbnails selection is allowed.
	EnableMultipleThumbnailSelection bool `json:"EnableMultipleThumbnailSelection,omitempty"`
	// Specifies whether the thumbnails can be moved by drag and drop.
	EnableThumbnailDragDrop bool `json:"EnableThumbnailDragDrop,omitempty"`
	// Specifies whether the open button shall be enabled.
	EnableFileUploadButton bool `json:"EnableFileUploadButton,omitempty"`
	// Specifies whether the 'open from uri' button shall be enabled.
	EnableLoadFromUriButton bool `json:"EnableLoadFromUriButton,omitempty"`
	// Specifies whether the save button shall be enabled.
	EnableSaveButton bool `json:"EnableSaveButton,omitempty"`
	// Specifies whether the save button shall be enabled.
	EnablePagesNavigationButtons bool `json:"EnablePagesNavigationButtons,omitempty"`
	// Specifies whether the print button shall be enabled.
	EnablePrintButton bool `json:"EnablePrintButton,omitempty"`
	// Specifies whether the print to pdf option shall be enabled.
	EnablePrintToPDF bool `json:"EnablePrintToPDF,omitempty"`
	// Specifies whether the fit width button shall be enabled.
	EnableFitWidthButton bool `json:"EnableFitWidthButton,omitempty"`
	// Specifies whether the fit original size button shall be enabled.
	EnableZoom100Button bool `json:"EnableZoom100Button,omitempty"`
	// Specifies whether the mouse mode button group shall be enabled.
	EnableMouseModeButtons bool `json:"EnableMouseModeButtons,omitempty"`
	// Specifies whether the pan mode button shall be enabled.
	EnablePanModeButton bool `json:"EnablePanModeButton,omitempty"`
	// Specifies whether the select mode button shall be enabled.
	EnableSelectModeButton bool `json:"EnableSelectModeButton,omitempty"`
	// Specifies whether the marquee zoom mode button shall be enabled.
	EnableMarqueeZoomModeButton bool `json:"EnableMarqueeZoomModeButton,omitempty"`
	// Specifies whether the fullscreen button shall be enabled.
	EnableFullScreenButton bool `json:"EnableFullScreenButton,omitempty"`
	// Specifies whether the 'Fit Page' button shall be enabled.
	EnableFitPageButton bool `json:"EnableFitPageButton,omitempty"`
	// Specifies whether the zoom button group shall be enabled.
	EnableZoomButtons bool `json:"EnableZoomButtons,omitempty"`
	// Specifies whether the page view mode button shall be enabled.
	EnablePageViewButtons bool `json:"EnablePageViewButtons,omitempty"`
	RotateButtonsMode RotateMode `json:"RotateButtonsMode,omitempty"`
	// Specifies whether the rotation button group shall be enabled.
	EnableRotateButtons bool `json:"EnableRotateButtons,omitempty"`
	// Specifies whether the action buttons shall be enabled when an annotation is selected.  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableAnnotationActionButtons bool `json:"EnableAnnotationActionButtons,omitempty"`
	// Specifies whether the selected text annotations shall be editable.
	EnableSelectedTextAnnotationEdition bool `json:"EnableSelectedTextAnnotationEdition,omitempty"`
	// Specifies whether the rectangle highlighter annotation button shall be enabled. <br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableRectangleHighlighterAnnotationButton bool `json:"EnableRectangleHighlighterAnnotationButton,omitempty"`
	// Specifies whether the freehand highlighter annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableFreehandHighlighterAnnotationButton bool `json:"EnableFreehandHighlighterAnnotationButton,omitempty"`
	// Specifies whether the rubber stamp annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableRubberStampAnnotationButton bool `json:"EnableRubberStampAnnotationButton,omitempty"`
	// Specifies whether the rectangle annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableRectangleAnnotationButton bool `json:"EnableRectangleAnnotationButton,omitempty"`
	// Specifies whether the ellipse annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableEllipseAnnotationButton bool `json:"EnableEllipseAnnotationButton,omitempty"`
	// Specifies whether the line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableLineAnnotationButton bool `json:"EnableLineAnnotationButton,omitempty"`
	// Specifies whether the connected line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableConnectedLineAnnotationButton bool `json:"EnableConnectedLineAnnotationButton,omitempty"`
	// Specifies whether the freehand annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableFreehandAnnotationButton bool `json:"EnableFreehandAnnotationButton,omitempty"`
	// Specifies whether the line arrow annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableLineArrowAnnotationButton bool `json:"EnableLineArrowAnnotationButton,omitempty"`
	// Specifies whether the link annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableLinkAnnotationButton bool `json:"EnableLinkAnnotationButton,omitempty"`
	// Specifies whether the ruler annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableRulerAnnotationButton bool `json:"EnableRulerAnnotationButton,omitempty"`
	EnablePolyRulerAnnotationButton bool `json:"EnablePolyRulerAnnotationButton,omitempty"`
	// Specifies whether the text annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableTextAnnotationButton bool `json:"EnableTextAnnotationButton,omitempty"`
	// Specifies whether the sticky note annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	EnableStickyNoteAnnotationButton bool `json:"EnableStickyNoteAnnotationButton,omitempty"`
	// Specifies whether the TWAIN acquisition button shall be enabled.
	EnableTwainAcquisitionButton bool `json:"EnableTwainAcquisitionButton,omitempty"`
	// Enables the custom configuration support for the TWAIN source.
	TwainSourceEnableCustomConfiguration bool `json:"TwainSourceEnableCustomConfiguration,omitempty"`
	// Specifies whether the TWAIN acquisition source shall acquire from the document feeder or the flatbed.  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
	TwainSourceSelectFeeder bool `json:"TwainSourceSelectFeeder,omitempty"`
	// Specifies the bit depth the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
	TwainSourceBitDepth int32 `json:"TwainSourceBitDepth,omitempty"`
	// Specifies the resolution the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
	TwainSourceResolution int32 `json:"TwainSourceResolution,omitempty"`
	// Specifies whether the TWAIN acquisition source shall enable duplex acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
	TwainSourceEnableDuplex bool `json:"TwainSourceEnableDuplex,omitempty"`
	// Specifies whether the TWAIN acquisition source shall hide or show the device driver user interface before acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
	TwainSourceHideUI bool `json:"TwainSourceHideUI,omitempty"`
	// Specifies whether the drawing mode for freehand annotation is multi line or not.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	FreeHandContinuousDrawingMode bool `json:"FreeHandContinuousDrawingMode,omitempty"`
	// Specifies whether the text search SnapIn is enabled.
	ShowTextSearchSnapIn bool `json:"ShowTextSearchSnapIn,omitempty"`
	// Specifies whether the Thumbnails SnapIn is enabled.
	ShowThumbnailsSnapIn bool `json:"ShowThumbnailsSnapIn,omitempty"`
	// Specifies whether the Bookmarks SnapIn is enabled.
	ShowBookmarksSnapIn bool `json:"ShowBookmarksSnapIn,omitempty"`
	// Specifies whether the annotations SnapIn is enabled.
	ShowAnnotationsSnapIn bool `json:"ShowAnnotationsSnapIn,omitempty"`
	// Specifies whether the Annotations Comments SnapIn is enabled.
	ShowAnnotationsCommentsSnapIn bool `json:"ShowAnnotationsCommentsSnapIn,omitempty"`
	// Specifies whether the Redaction Snap-In is enabled or not.  <remarks>  Default value is true.  </remarks>
	ShowRedactionSnapIn bool `json:"ShowRedactionSnapIn,omitempty"`
	// Specifies whether the Digital Signature Snap-In is enabled or not.  <remarks>  Default value is false.  </remarks>
	ShowDigitalSignatureSnapIn bool `json:"ShowDigitalSignatureSnapIn,omitempty"`
	// The width, in pixels, of each thumbnail.
	ThumbnailWidth int32 `json:"ThumbnailWidth,omitempty"`
	// The height, in pixels, of each thumbnail.
	ThumbnailHeight int32 `json:"ThumbnailHeight,omitempty"`
	// Specifies the Snap-in panel default width.
	SnapInPanelDefaultWidth *string `json:"SnapInPanelDefaultWidth,omitempty"`
	// Specifies whether the Snap-in panel is collapsed or not.
	CollapsedSnapIn bool `json:"CollapsedSnapIn,omitempty"`
	// Specifies whether the Snap-in panel should be automatically collapsed when the displayed document is closed.
	CollapseSnapinOnDocumentClosed bool `json:"CollapseSnapinOnDocumentClosed,omitempty"`
	// Specifies whether the button that collapses the Snap-in panel is displayed or not.
	ShowSnapInCollapseButton bool `json:"ShowSnapInCollapseButton,omitempty"`
	// Specifies whether the header of the Snap-in panel is displayed or not.
	ShowSnapInPanelHeader bool `json:"ShowSnapInPanelHeader,omitempty"`
	// Specifies whether the Snap-in button strip is displayed or not.
	ShowSnapInButtonStrip bool `json:"ShowSnapInButtonStrip,omitempty"`
	// Specifies whether the Toolbars are visible or not.
	ShowToolbar bool `json:"ShowToolbar,omitempty"`
	ToolbarStyle ToolbarStyle `json:"ToolbarStyle,omitempty"`
	// The space, in pixels, between each button of the toolbar.
	ToolbarButtonsSpacing int32 `json:"ToolbarButtonsSpacing,omitempty"`
	// The height, in pixels, of the toolbar.
	ToolbarHeight int32 `json:"ToolbarHeight,omitempty"`
	// Specifies the color used to stroke viewer elements such borders, toolbar icons and thumbnail text.
	StrokeColor *string `json:"StrokeColor,omitempty"`
	// Specifies the color used to define dropdowns borders, buttons separators, line separators.
	MiscBorderColor *string `json:"MiscBorderColor,omitempty"`
	// Specifies the color used in both dialogs and snap-ins headers.
	HeaderColor *string `json:"HeaderColor,omitempty"`
	// Specifies the color used in both dialogs and snap-ins body background.
	PanelBackColor *string `json:"PanelBackColor,omitempty"`
	// Specifies the viewer area background color.
	ViewerBackColor *string `json:"ViewerBackColor,omitempty"`
	// Specifies the selected and active elements stroke color.
	ActiveSelectedColor *string `json:"ActiveSelectedColor,omitempty"`
	// Viewer Toolbar Background Color.
	ToolbarBackColor *string `json:"ToolbarBackColor,omitempty"`
	// Custom error notification icon.<br />  Used to specify a custom icon within errors notification boxes.
	CustomNotificationIconError *string `json:"CustomNotificationIconError,omitempty"`
	// Custom question notification icon.<br />  Used to specify a custom icon within questions notification boxes.
	CustomNotificationIconQuestion *string `json:"CustomNotificationIconQuestion,omitempty"`
	// Custom warning notification icon.<br />  Used to specify a custom icon within warnings notification boxes.
	CustomNotificationIconWarning *string `json:"CustomNotificationIconWarning,omitempty"`
	// Custom info notification icon.<br />  Used to specify a custom icon within information notification boxes.
	CustomNotificationIconInfo *string `json:"CustomNotificationIconInfo,omitempty"`
	// Custom success notification icon.<br />  Used to specify a custom icon within success notification boxes.
	CustomNotificationIconOk *string `json:"CustomNotificationIconOk,omitempty"`
	// Specifies extensions of the allowed formats for export. Each extension must be separated by a coma.<br />  Wildcard character '*' can be used to specify any supported format.<br />  The following extensions are currently supported: \"PDF\", \"TIFF\".<br />  For example use \"*\" to allow all supported format for export, \"PDF\" to allow only PDF export and \"PDF,TIFF\" to allow PDF and TIFF export.
	AllowedExportFormats *string `json:"AllowedExportFormats,omitempty"`
	// Specifies whether the drawing mode panel shall be enabled while user is drawing a free hand annotation.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
	DisableAnnotationDrawingModePanel bool `json:"DisableAnnotationDrawingModePanel,omitempty"`
	ImageQuality int32 `json:"ImageQuality,omitempty"`
	PrintQuality PrintQuality `json:"PrintQuality,omitempty"`
	// Specifies whether documents drag & drop is allowed into the viewer area.
	EnableDocumentsDrop bool `json:"EnableDocumentsDrop,omitempty"`
	// Specifies custom headers for the generated AJAX requests.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
	AjaxCustomHeaders *string `json:"AjaxCustomHeaders,omitempty"`
	// Specifies custom headers to be used for the file download JavaScript API requests (for instance LoadFromUri and LoadFromUriEx). Headers that are set through this property won't be exposed client-side.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
	FileDownloadCustomHeaders *string `json:"FileDownloadCustomHeaders,omitempty"`
	// Specifies the maximum number of results provided by a text search request.
	TextSearchMaxResults int32 `json:"TextSearchMaxResults,omitempty"`
	// Specifies, in bytes, the upload size limit.
	MaxUploadSize int32 `json:"MaxUploadSize,omitempty"`
	// Specifies, in bytes, the download size limit.
	MaxDownloadSize int32 `json:"MaxDownloadSize,omitempty"`
	// Specifies the maximum of pages per loaded document.
	MaxPages int32 `json:"MaxPages,omitempty"`
	// Specifies a list of certificates to be made available on the client side to apply digital signature to documents.
	Certificates *[]DocuViewareCertificate `json:"Certificates,omitempty"`
	// A formatted string specifying undocumented extra features to handle.
	ExtraFeatures *string `json:"ExtraFeatures,omitempty"`
}
