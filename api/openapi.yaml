openapi: 3.0.1
info:
  description: "\r\n    Introduction:\r\n\r\nPassportPDF API is a REST API that lets\
    \ you perform complex operations on documents and images easily.\r\nYou may consume\
    \ the API by using our.NET SDK (other platforms / languages are soon to come),\
    \ or any REST client by sending your requests to the appropriate endpoints. \r\
    \nA list of all the available endpoints can be found on the API reference page\
    \ at https://passportpdfapi.com/references/api/index.html\r\n\r\n    Authentication:\r\
    \n\r\nEach available operation has a predefined cost, expressed as a number of\
    \ tokens.\r\nThese tokens are deducted from your \"passport,\" which has a unique\
    \ identifier that acts as an API key. This key is, therefore, required to be provided\
    \ with each request for the latter to be honored(except if the operation does\
    \ not have a cost, typically when you request a simple data with a GET).\r\nYour\
    \ key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"\
    \r\nIf you are using the.NET SDK, you can either set your key in the ApiKey property\
    \ of your API instance(PdfApi or ImageApi, for example) or set it globally in\
    \ the GlobalConfiguration instance if you want to set it once for the whole life\
    \ cycle of your application.\r\n\r\n\r\n    Communication with the API:\r\n\r\n\
    All the available actions are listed on the API reference page, as previously\
    \ mentioned.\r\nThere are several different controllers, i.e., routes, which categorize\
    \ the actions.For example, you may use the PDF controller(\"/api/pdf\" route)\
    \ to perform PDF - related operations, and the Image controller(\"/api/image\"\
    ) for images.\r\nEach action defines what kind of parameters(if any) is expected,\
    \ and what kind of response is served.Parameters and responses are represented\
    \ using data models, or \"schemas,\" and are listed in the \"Schemas\" section\
    \ of the reference. \r\nParameters and response models of a given action are both\
    \ prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\"\
    \ e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters\
    \ and PdfReduceResponse models.\r\nUsing the .NET SDK, you will find the objects\
    \ to interact with the different controllers in the PassportPDF.Api namespace\
    \ and all the schemas in the PassportPDF.Model namespace.\r\n\r\n    Processing\
    \ documents:\r\n\r\nEach document manipulation starts with importing the file\
    \ onto the API.\r\nThe LoadDocument action of the PDF controller lets you import\
    \ your document as a PDF.\r\nNote that the GetPDFImportSupportedFileExtensions\
    \ action of the same controller will let you know all the different types of files\
    \ that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse\
    \ model, which contains a \"FileId\" property.This identifier is required for\
    \ the API to know about your document for further manipulations, hence the presence\
    \ of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters\
    \ schemas). To download the changes made to a file, you need, of course, to download\
    \ the new version of the file from the API.\r\nTo save your document as a PDF,\
    \ you will need to use the SaveDocument action of the PDF controller and provide\
    \ a PdfSaveDocumentParameters data model that contains the identifier of your\
    \ file.\r\n\r\n    Errors:\r\n\r\nConventional HTTP response codes are used to\
    \ indicate the success or failure of an API request. \r\nThe Error data model\
    \ also defines some information about an error that occurred on the API. \r\n\
    Each response model has an Error in its definition, and its sole existence in\
    \ the serialized response - which should thus always be checked - indicates that\
    \ something went wrong.\r\nAmong the information given by the Error schema, \"\
    ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that\
    \ defines a first level of error information. \"InternalErrorId\" defines a unique\
    \ identifier for the error, which comes very handy for us to troubleshoot any\
    \ issue you may encounter quickly.\r\n\r\n    Efficiency considerations:\r\n\r\
    \nMultipart upload/download is available and lets you directly stream a file to/from\
    \ the API.\r\nIn the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile\
    \ may be used to upload/download a document using respectively binary data serialization\
    \ and streaming multipart HTTP requests.\r\nThe second approach should be favored\
    \ when dealing with large files, as it will be much more efficient in that context.\r\
    \n"
  title: PassportPDF API
  version: 1.0.1
servers:
- url: https://passportpdfapi.com
paths:
  /api/config/ConfigGetAPIVersion:
    get:
      operationId: ConfigGetAPIVersion
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
          description: Success
      tags:
      - Config
  /api/config/ConfigGetMaxAllowedContentLength:
    get:
      operationId: ConfigGetMaxAllowedContentLength
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LongResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/LongResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/LongResponse'
          description: Success
      summary: Gets the maximal length of a request content, in bytes.
      tags:
      - Config
  /api/config/ConfigGetSuggestedClientTimeout:
    get:
      operationId: ConfigGetSuggestedClientTimeout
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
          description: Success
      summary: Gets the suggested client API timeout, in milliseconds.
      tags:
      - Config
  /api/config/ConfigGetSuggestedMaxClientThreads:
    get:
      operationId: ConfigGetSuggestedMaxClientThreads
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
          description: Success
      summary: Gets the suggested maximum number of threads to be used simultaneously
        by a client application.
      tags:
      - Config
  /api/config/ConfigGetSupportedFonts:
    get:
      operationId: ConfigGetSupportedFonts
      responses:
        "200":
          content:
            text/plain:
              schema:
                items:
                  $ref: '#/components/schemas/Font'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Font'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/Font'
                type: array
          description: Success
      summary: Gets the list of supported fonts for text drawing operations.
      tags:
      - Config
  /api/config/ConfigGetSupportedOCRLanguages:
    get:
      operationId: ConfigGetSupportedOCRLanguages
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
          description: Success
      summary: Gets the list of supported languages for OCR.
      tags:
      - Config
  /api/document/DocumentClose:
    post:
      operationId: DocumentClose
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DocumentCloseParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCloseParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/DocumentCloseParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DocumentCloseParameters'
        description: A DocumentCloseParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentCloseResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCloseResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentCloseResponse'
          description: Success
      summary: Closes a previously uploaded document.
      tags:
      - Document
  /api/document/DocumentGetPreview:
    post:
      operationId: DocumentGetPreview
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/GetDocumentPreviewParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/GetDocumentPreviewParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/GetDocumentPreviewParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/GetDocumentPreviewParameters'
        description: A GetDocumentPreviewParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentGetPreviewResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentGetPreviewResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentGetPreviewResponse'
          description: Success
      summary: Gets the format, the page count, and a thumbnail of the provided, or
        a previously uploaded document.
      tags:
      - Document
  /api/docuvieware/DocuViewareGetControl:
    post:
      operationId: DocuViewareGetControl
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DocuViewareGetControlParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/DocuViewareGetControlParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/DocuViewareGetControlParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DocuViewareGetControlParameters'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DocuViewareGetControlResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/DocuViewareGetControlResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/DocuViewareGetControlResponse'
          description: Success
      tags:
      - DocuVieware
  /api/docuvieware/DocuViewareGetVersion:
    get:
      operationId: DocuViewareGetVersion
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
          description: Success
      tags:
      - DocuVieware
  /api/docuvieware/DocuViewareSave:
    post:
      operationId: DocuViewareSave
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DocuViewareSaveParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/DocuViewareSaveParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/DocuViewareSaveParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DocuViewareSaveParameters'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DocuViewareSaveResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/DocuViewareSaveResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/DocuViewareSaveResponse'
          description: Success
      tags:
      - DocuVieware
  /api/image/ImageAdjust:
    post:
      operationId: ImageAdjust
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageAdjustParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageAdjustParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageAdjustParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageAdjustParameters'
        description: An ImageAdjustParameters object specifying the parameters for
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageAdjustResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageAdjustResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageAdjustResponse'
          description: Success
      summary: Adjusts a previously uploaded image.
      tags:
      - Image
  /api/image/ImageAutoCrop:
    post:
      operationId: ImageAutoCrop
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageAutoCropParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageAutoCropParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageAutoCropParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageAutoCropParameters'
        description: An ImageAutoCropParameters object specifying the parameters for
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageAutoCropResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageAutoCropResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageAutoCropResponse'
          description: Success
      summary: Automatically crops a previously uploaded image.
      tags:
      - Image
  /api/image/ImageCleanupDocument:
    post:
      operationId: ImageCleanupDocument
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageCleanupDocumentParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCleanupDocumentParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageCleanupDocumentParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageCleanupDocumentParameters'
        description: An ImageCleanupDocumentParameters object specifying the parameters
          for the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageCleanupDocumentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCleanupDocumentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCleanupDocumentResponse'
          description: Success
      summary: Cleanup a previously uploaded image.
      tags:
      - Image
  /api/image/ImageCloneRegions:
    post:
      operationId: ImageCloneRegions
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageCloneRegionsParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCloneRegionsParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageCloneRegionsParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageCloneRegionsParameters'
        description: An ImageCloneRegionsParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageCloneRegionsResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCloneRegionsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCloneRegionsResponse'
          description: Success
      summary: Clones regions from a previously uploaded image into new images.
      tags:
      - Image
  /api/image/ImageClose:
    post:
      operationId: ImageClose
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageCloseParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCloseParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageCloseParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageCloseParameters'
        description: An ImageCloseParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageCloseResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCloseResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCloseResponse'
          description: Success
      summary: Closes a previously uploaded image.
      tags:
      - Image
  /api/image/ImageConvertColorDepth:
    post:
      operationId: ImageConvertColorDepth
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageConvertColorDepthParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageConvertColorDepthParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageConvertColorDepthParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageConvertColorDepthParameters'
        description: An ImageConvertColorDepthParameters object specifying the parameters
          for the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageConvertColorDepthResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageConvertColorDepthResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageConvertColorDepthResponse'
          description: Success
      summary: Converts the color depth of a previously uploaded image.
      tags:
      - Image
  /api/image/ImageCrop:
    post:
      operationId: ImageCrop
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageCropParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageCropParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageCropParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageCropParameters'
        description: An ImageCropParameters object specifying the parameters for the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageCropResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageCropResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageCropResponse'
          description: Success
      summary: Crops a previously uploaded image.
      tags:
      - Image
  /api/image/ImageDeletePage:
    post:
      operationId: ImageDeletePage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageDeletePageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDeletePageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageDeletePageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageDeletePageParameters'
        description: An ImageDeletePageParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageDeletePageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDeletePageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageDeletePageResponse'
          description: Success
      summary: Deletes a page range from a previously uploaded image.
      tags:
      - Image
  /api/image/ImageDetectBlankPages:
    post:
      operationId: ImageDetectBlankPages
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageDetectBlankPagesParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDetectBlankPagesParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageDetectBlankPagesParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageDetectBlankPagesParameters'
        description: An ImageDetectBlankPagesParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageDetectBlankPagesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDetectBlankPagesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageDetectBlankPagesResponse'
          description: Success
      summary: Detects the blank page(s) from a previously uploaded image and offers
        to remove them.
      tags:
      - Image
  /api/image/ImageDetectColor:
    post:
      operationId: ImageDetectColor
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageDetectColorParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDetectColorParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageDetectColorParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageDetectColorParameters'
        description: An ImageDetectColorParameters object specifying the parameters
          for the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageDetectColorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDetectColorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageDetectColorResponse'
          description: Success
      summary: Performs color detection  on a previously uploaded image.
      tags:
      - Image
  /api/image/ImageDetectPageOrientation:
    post:
      operationId: ImageDetectPageOrientation
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageDetectPageOrientationParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDetectPageOrientationParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageDetectPageOrientationParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageDetectPageOrientationParameters'
        description: An ImagedetectPageOrientationParameters object specifying the
          parameters of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageDetectPageOrientationResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDetectPageOrientationResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageDetectPageOrientationResponse'
          description: Success
      summary: Detects the orientation of the page(s) of a previously uploaded image
        and offers to automatically rotate them.
      tags:
      - Image
  /api/image/ImageFilter:
    post:
      operationId: ImageFilter
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageFilterParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageFilterParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageFilterParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageFilterParameters'
        description: An ImageFilterParameters object specifying the parameters for
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageFilterResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageFilterResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageFilterResponse'
          description: Success
      summary: Applies filters to a previously uploaded image.
      tags:
      - Image
  /api/image/ImageGetPageThumbnail:
    post:
      operationId: ImageGetPageThumbnail
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageGetPageThumbnailParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageGetPageThumbnailParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageGetPageThumbnailParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageGetPageThumbnailParameters'
        description: A PDFGetPageThumbnailParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageGetPageThumbnailResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageGetPageThumbnailResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageGetPageThumbnailResponse'
          description: Success
      summary: Gets a thumbnail of each page within the provided page range from a
        previously uploaded image.
      tags:
      - Image
  /api/image/ImageGetSupportedFileExtensions:
    get:
      operationId: ImageGetSupportedFileExtensions
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
          description: Success
      summary: Gets the supported file extensions by the image loading actions.
      tags:
      - Image
  /api/image/ImageLoad:
    post:
      operationId: ImageLoad
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LoadImageFromByteArrayParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/LoadImageFromByteArrayParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/LoadImageFromByteArrayParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoadImageFromByteArrayParameters'
        description: A LoadImageFromByteArrayParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageLoadResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageLoadResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageLoadResponse'
          description: Success
      summary: "Loads the provided image file.\r\nSupported image formats can be retrieved\
        \ by the GetSupportedImageFileExtensions action."
      tags:
      - Image
  /api/image/ImageLoadMultipart:
    post:
      operationId: ImageLoadMultipart
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          multipart/form-data:
            encoding:
              fileData:
                contentType: application/octet-stream
                style: form
              loadImageParameters:
                contentType: application/json
                style: form
            schema:
              properties:
                fileData:
                  description: The data of the document.
                  format: binary
                  type: string
                loadImageParameters:
                  $ref: '#/components/schemas/LoadImageParameters'
              required:
              - fileData
              type: object
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageLoadResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageLoadResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageLoadResponse'
          description: Success
      summary: "Loads the provided image file using Multipart Upload.\r\nSupported\
        \ image formats can be retrieved by the GetSupportedImageFileExtensions action."
      tags:
      - Image
  /api/image/ImageMICR:
    post:
      operationId: ImageMICR
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageMICRParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageMICRParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageMICRParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageMICRParameters'
        description: An ImageMICRParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageMICRResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageMICRResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageMICRResponse'
          description: Success
      summary: Performs MICR (Magnetic Ink Character Recognition) on a previously
        uploaded image.
      tags:
      - Image
  /api/image/ImageReadBarcodes:
    post:
      operationId: ImageReadBarcodes
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageReadBarcodesParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageReadBarcodesParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageReadBarcodesParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageReadBarcodesParameters'
        description: An ImageReadBarcodesParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReadBarcodesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ReadBarcodesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ReadBarcodesResponse'
          description: Success
      summary: Reads barcodes from a previously uploaded image.
      tags:
      - Image
  /api/image/ImageResize:
    post:
      operationId: ImageResize
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageResizeParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageResizeParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageResizeParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageResizeParameters'
        description: An ImageResizeParameters object specifying the parameters for
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageResizeResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResizeResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageResizeResponse'
          description: Success
      summary: Resizes a previously uploaded image.
      tags:
      - Image
  /api/image/ImageRotate:
    post:
      operationId: ImageRotate
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageRotateParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRotateParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageRotateParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageRotateParameters'
        description: An ImageRotateParameters object specifying the parameters for
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageRotateResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRotateResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageRotateResponse'
          description: Success
      summary: Rotates and/or flips a previously uploaded image.
      tags:
      - Image
  /api/image/ImageSaveAsJPEG:
    post:
      operationId: ImageSaveAsJPEG
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
        description: An ImageSaveAsJPEGParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageSaveAsJPEGResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsJPEGResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsJPEGResponse'
          description: Success
      summary: Saves a previously uploaded image as JPEG.
      tags:
      - Image
  /api/image/ImageSaveAsJPEGFile:
    post:
      operationId: ImageSaveAsJPEGFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsJPEGParameters'
        description: An ImageSaveAsJPEGParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded image as JPEG.
      tags:
      - Image
  /api/image/ImageSaveAsPDF:
    post:
      operationId: ImageSaveAsPDF
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
        description: An ImagesaveAsPDFParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPDFResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPDFResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPDFResponse'
          description: Success
      summary: Saves a previously uploaded image as PDF.
      tags:
      - Image
  /api/image/ImageSaveAsPDFFile:
    post:
      operationId: ImageSaveAsPDFFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFParameters'
        description: An ImagesaveAsPDFParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded image as PDF.
      tags:
      - Image
  /api/image/ImageSaveAsPDFMRC:
    post:
      operationId: ImageSaveAsPDFMRC
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
        description: An ImagesaveAsPDFMRCParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPDFMRCResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPDFMRCResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPDFMRCResponse'
          description: Success
      summary: Saves a previously uploaded image as PDF using MRC compression.
      tags:
      - Image
  /api/image/ImageSaveAsPDFMRCFile:
    post:
      operationId: ImageSaveAsPDFMRCFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPDFMRCParameters'
        description: An ImagesaveAsPDFMRCParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded image as PDF using MRC compression.
      tags:
      - Image
  /api/image/ImageSaveAsPNG:
    post:
      operationId: ImageSaveAsPNG
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
        description: An ImageSaveAsPNGParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPNGResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPNGResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsPNGResponse'
          description: Success
      summary: Saves a previously uploaded image as PNG.
      tags:
      - Image
  /api/image/ImageSaveAsPNGFile:
    post:
      operationId: ImageSaveAsPNGFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsPNGParameters'
        description: An ImageSaveAsPNGParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded image as PNG.
      tags:
      - Image
  /api/image/ImageSaveAsTIFF:
    post:
      operationId: ImageSaveAsTIFF
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
        description: An ImageSaveAsTIFFParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageSaveAsTIFFResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsTIFFResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsTIFFResponse'
          description: Success
      summary: Saves a previously uploaded image as TIFF.
      tags:
      - Image
  /api/image/ImageSaveAsTIFFFile:
    post:
      operationId: ImageSaveAsTIFFFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFParameters'
        description: An ImageSaveAsTIFFParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded image as TIFF.
      tags:
      - Image
  /api/image/ImageSaveAsTIFFMultipage:
    post:
      operationId: ImageSaveAsTIFFMultipage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
        description: An ImageSaveAsTIFFMultipageParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageSaveAsTIFFMultipageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsTIFFMultipageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageSaveAsTIFFMultipageResponse'
          description: Success
      summary: Saves a previously uploaded image as multipage TIFF.
      tags:
      - Image
  /api/image/ImageSaveAsTIFFMultipageFile:
    post:
      operationId: ImageSaveAsTIFFMultipageFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSaveAsTIFFMultipageParameters'
        description: An ImageSaveAsTIFFMultipageParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded image as multipage TIFF.
      tags:
      - Image
  /api/image/ImageSwapPages:
    post:
      operationId: ImageSwapPages
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ImageSwapPagesParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/ImageSwapPagesParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/ImageSwapPagesParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ImageSwapPagesParameters'
        description: An ImageSwapPagesParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ImageSwapPagesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSwapPagesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ImageSwapPagesResponse'
          description: Success
      summary: Swaps two pages from a previously uploaded image.
      tags:
      - Image
  /api/passportmanager/PassportManagerGetPassportInfo:
    get:
      operationId: PassportManagerGetPassportInfo
      parameters:
      - explode: true
        in: query
        name: passportId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PassportPDFPassport'
            application/json:
              schema:
                $ref: '#/components/schemas/PassportPDFPassport'
            text/json:
              schema:
                $ref: '#/components/schemas/PassportPDFPassport'
          description: Success
      tags:
      - PassportManager
  /api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetApplicationDownloadLink:
    get:
      operationId: PassportPDFApplicationManagerGetApplicationDownloadLink
      parameters:
      - explode: true
        in: query
        name: applicationId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
          description: Success
      tags:
      - PassportPDFApplicationManager
  /api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetApplicationLatestVersion:
    get:
      operationId: PassportPDFApplicationManagerGetApplicationLatestVersion
      parameters:
      - explode: true
        in: query
        name: applicationId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
          description: Success
      tags:
      - PassportPDFApplicationManager
  /api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetApplicationMinimumSupportedVersion:
    get:
      operationId: PassportPDFApplicationManagerGetApplicationMinimumSupportedVersion
      parameters:
      - explode: true
        in: query
        name: applicationId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
          description: Success
      tags:
      - PassportPDFApplicationManager
  /api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetMaxClientThreads:
    get:
      operationId: PassportPDFApplicationManagerGetMaxClientThreads
      parameters:
      - explode: true
        in: query
        name: applicationId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/IntegerResponse'
          description: Success
      summary: Gets the maximum number of threads to be used simultaneously by a client
        application.
      tags:
      - PassportPDFApplicationManager
  /api/pdf/Annotate:
    post:
      operationId: Annotate
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfAnnotateParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfAnnotateParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfAnnotateParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfAnnotateParameters'
        description: A PdfAnnotateParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfAnnotateResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfAnnotateResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfAnnotateResponse'
          description: Success
      summary: Annotates a previously uploaded document.
      tags:
      - PDF
  /api/pdf/AutoDeskew:
    post:
      operationId: AutoDeskew
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfAutoDeskewParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfAutoDeskewParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfAutoDeskewParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfAutoDeskewParameters'
        description: A PdfAutoDeskewParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfAutoDeskewResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfAutoDeskewResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfAutoDeskewResponse'
          description: Success
      summary: Performs auto deskew on a page range of a previously uploaded document.
      tags:
      - PDF
  /api/pdf/ClearPage:
    post:
      operationId: ClearPage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfClearPageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfClearPageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfClearPageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfClearPageParameters'
        description: A PdfClearPageParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfClearPageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfClearPageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfClearPageResponse'
          description: Success
      summary: Clears a page range from a previously uploaded document.
      tags:
      - PDF
  /api/pdf/ClonePage:
    post:
      operationId: ClonePage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfClonePageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfClonePageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfClonePageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfClonePageParameters'
        description: A PdfClonePageParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfClonePageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfClonePageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfClonePageResponse'
          description: Success
      summary: Clones specific pages from a previously uploaded document to another
        previously uploaded document.
      tags:
      - PDF
  /api/pdf/ClosePDF:
    post:
      operationId: ClosePDF
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfCloseDocumentParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfCloseDocumentParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfCloseDocumentParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfCloseDocumentParameters'
        description: A PdfCloseDocumentParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfCloseDocumentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfCloseDocumentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfCloseDocumentResponse'
          description: Success
      summary: Closes a previously uploaded document.
      tags:
      - PDF
  /api/pdf/ConvertToPDFA:
    post:
      operationId: ConvertToPDFA
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfConvertToPDFAParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfConvertToPDFAParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfConvertToPDFAParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfConvertToPDFAParameters'
        description: A PdfConvertToPDFAParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfConvertToPDFAResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfConvertToPDFAResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfConvertToPDFAResponse'
          description: Success
      summary: Converts a previously uploaded document to PDF/A.
      tags:
      - PDF
  /api/pdf/DeletePage:
    post:
      operationId: DeletePage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfDeletePageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfDeletePageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfDeletePageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfDeletePageParameters'
        description: A PdfDeletePageParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfDeletePageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfDeletePageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfDeletePageResponse'
          description: Success
      summary: Deletes a page range from a previously uploaded document.
      tags:
      - PDF
  /api/pdf/DetectPageOrientation:
    post:
      operationId: DetectPageOrientation
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfDetectPageOrientationParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfDetectPageOrientationParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfDetectPageOrientationParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfDetectPageOrientationParameters'
        description: A PdfDetectPageOrientationParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfDetectPageOrientationResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfDetectPageOrientationResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfDetectPageOrientationResponse'
          description: Success
      summary: Detects the orientation of the page(s) of a previously uploaded document
        and offers to automatically rotate them.
      tags:
      - PDF
  /api/pdf/DigiSign:
    post:
      operationId: DigiSign
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfDigiSignParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfDigiSignParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfDigiSignParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfDigiSignParameters'
        description: A PdfDigiSignParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfDigiSignResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfDigiSignResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfDigiSignResponse'
          description: Success
      summary: Signs a previously uploaded document digitally.
      tags:
      - PDF
  /api/pdf/DrawImage:
    post:
      operationId: DrawImage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfDrawImageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfDrawImageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfDrawImageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfDrawImageParameters'
        description: A PdfDrawImageParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfDrawImageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfDrawImageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfDrawImageResponse'
          description: Success
      summary: Draws an image on a page range of a previously uploaded document.
      tags:
      - PDF
  /api/pdf/ExtractPage:
    post:
      operationId: ExtractPage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfExtractPageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfExtractPageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfExtractPageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfExtractPageParameters'
        description: A PdfExtractPageParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfExtractPageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfExtractPageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfExtractPageResponse'
          description: Success
      summary: Extracts a page range from a previously uploaded document into one
        or several new documents.
      tags:
      - PDF
  /api/pdf/ExtractText:
    post:
      operationId: ExtractText
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfExtractTextParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfExtractTextParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfExtractTextParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfExtractTextParameters'
        description: A PdfExtractTextParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfExtractTextResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfExtractTextResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfExtractTextResponse'
          description: Success
      summary: Extracts text from the document pages.
      tags:
      - PDF
  /api/pdf/Flatten:
    post:
      operationId: Flatten
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfFlattenParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfFlattenParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfFlattenParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfFlattenParameters'
        description: A PdfFlatten object specifying the parameters of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfFlattenResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfFlattenResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfFlattenResponse'
          description: Success
      summary: Flattens the form-fields, annotations, and/or the layers of a previously
        uploaded document.
      tags:
      - PDF
  /api/pdf/GetInfo:
    post:
      operationId: GetInfo
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfGetInfoParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfGetInfoParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfGetInfoParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfGetInfoParameters'
        description: A PdfGetInfoParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfGetInfoResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfGetInfoResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfGetInfoResponse'
          description: Success
      summary: Gets information about a previously uploaded document.
      tags:
      - PDF
  /api/pdf/GetPageThumbnail:
    post:
      operationId: GetPageThumbnail
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfGetPageThumbnailParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfGetPageThumbnailParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfGetPageThumbnailParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfGetPageThumbnailParameters'
        description: A PdfGetPageThumbnailParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfGetPageThumbnailResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfGetPageThumbnailResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfGetPageThumbnailResponse'
          description: Success
      summary: Gets a thumbnail of each page within the provided page range from a
        previously uploaded document.
      tags:
      - PDF
  /api/pdf/GetPDFImportSupportedFileExtensions:
    get:
      operationId: GetPDFImportSupportedFileExtensions
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/StringArrayResponse'
          description: Success
      summary: Gets the supported file extensions by the LoadDocumentAsPDF action.
      tags:
      - PDF
  /api/pdf/InsertImage:
    post:
      operationId: InsertImage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfInsertImageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfInsertImageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfInsertImageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfInsertImageParameters'
        description: A PdfInsertImageParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfInsertImageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfInsertImageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfInsertImageResponse'
          description: Success
      summary: Inserts an image on a new page of a previously uploaded document.
      tags:
      - PDF
  /api/pdf/InsertNewPage:
    post:
      operationId: InsertNewPage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfInsertNewPageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfInsertNewPageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfInsertNewPageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfInsertNewPageParameters'
        description: A PdfInsertNewPageParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfInsertNewPageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfInsertNewPageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfInsertNewPageResponse'
          description: Success
      summary: Inserts one or more new blank pages to a specific position in a previously
        uploaded document.
      tags:
      - PDF
  /api/pdf/InsertPageNumber:
    post:
      operationId: InsertPageNumber
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfInsertPageNumberParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfInsertPageNumberParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfInsertPageNumberParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfInsertPageNumberParameters'
        description: A PdfInsertPageNumberParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfInsertPageNumberResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfInsertPageNumberResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfInsertPageNumberResponse'
          description: Success
      summary: Inserts page number(s) on a document.
      tags:
      - PDF
  /api/pdf/InsertText:
    post:
      operationId: InsertText
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfInsertTextParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfInsertTextParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfInsertTextParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfInsertTextParameters'
        description: A PdfInsertTextParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfInsertTextResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfInsertTextResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfInsertTextResponse'
          description: Success
      summary: Inserts text on a document.
      tags:
      - PDF
  /api/pdf/Linearize:
    post:
      operationId: Linearize
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfLinearizeParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfLinearizeParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfLinearizeParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfLinearizeParameters'
        description: A PdfLinearizeParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfLinearizeResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfLinearizeResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfLinearizeResponse'
          description: Success
      summary: Linearizes a previously uploaded document.
      tags:
      - PDF
  /api/pdf/LoadDocument:
    post:
      operationId: LoadDocumentAsPDF
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfLoadDocumentFromByteArrayParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfLoadDocumentFromByteArrayParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfLoadDocumentFromByteArrayParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfLoadDocumentFromByteArrayParameters'
        description: A PdfLoadDocumentFromByteArrayParameters object specifying the
          parameters of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfLoadDocumentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfLoadDocumentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfLoadDocumentResponse'
          description: Success
      summary: "Imports the provided document as PDF.\r\nSupported document formats\
        \ can be retrieved by the GetPDFImportSupportedFileExtensions action."
      tags:
      - PDF
  /api/pdf/LoadDocumentAsPDFMultipart:
    post:
      operationId: LoadDocumentAsPDFMultipart
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          multipart/form-data:
            encoding:
              fileData:
                contentType: application/octet-stream;
                style: form
              loadDocumentParameters:
                contentType: application/json
                style: form
            schema:
              properties:
                fileData:
                  description: The data of the document.
                  format: binary
                  type: string
                loadDocumentParameters:
                  $ref: '#/components/schemas/PdfLoadDocumentParameters'
              required:
              - fileData
              type: object
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfLoadDocumentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfLoadDocumentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfLoadDocumentResponse'
          description: Success
      summary: "Imports the provided document as PDF using Multipart Upload.\r\nSupported\
        \ document formats can be retrieved by the GetPDFImportSupportedFileExtensions\
        \ action."
      tags:
      - PDF
  /api/pdf/Merge:
    post:
      operationId: Merge
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfMergeParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfMergeParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfMergeParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfMergeParameters'
        description: A PdfMergeParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfMergeResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfMergeResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfMergeResponse'
          description: Success
      summary: Merges several previously uploaded documents into a new PDF.
      tags:
      - PDF
  /api/pdf/MergePages:
    post:
      operationId: MergePages
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfMergePagesParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfMergePagesParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfMergePagesParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfMergePagesParameters'
        description: A PdfMergePages object specifying the parameters of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfMergePagesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfMergePagesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfMergePagesResponse'
          description: Success
      summary: Merges multiple pages, vertically, within a previously uploaded document
        into one single page.
      tags:
      - PDF
  /api/pdf/MovePage:
    post:
      operationId: MovePage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfMovePageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfMovePageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfMovePageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfMovePageParameters'
        description: A PdfMovePageParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfMovePageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfMovePageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfMovePageResponse'
          description: Success
      summary: Moves a page range from a previously uploaded document.
      tags:
      - PDF
  /api/pdf/OCR:
    post:
      operationId: OCR
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfOCRParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfOCRParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfOCRParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfOCRParameters'
        description: A PdfOCRParameters object specifying the parameters of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfOCRResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfOCRResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfOCRResponse'
          description: Success
      summary: "Performs optical character recognition on a page range of a previously\
        \ uploaded document.\r\nThe recognized text is added as invisible text on\
        \ each processed page.\r\nNo token is charged for blank pages."
      tags:
      - PDF
  /api/pdf/Protect:
    post:
      operationId: Protect
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfProtectParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfProtectParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfProtectParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfProtectParameters'
        description: A PdfProtectParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfProtectResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfProtectResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfProtectResponse'
          description: Success
      summary: Protects a previously uploaded document.
      tags:
      - PDF
  /api/pdf/ReadBarcodes:
    post:
      operationId: ReadBarcodes
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfReadBarcodesParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfReadBarcodesParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfReadBarcodesParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfReadBarcodesParameters'
        description: A PdfReadBarcodesParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReadBarcodesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ReadBarcodesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ReadBarcodesResponse'
          description: Success
      summary: Reads barcodes from a previously uploaded document.
      tags:
      - PDF
  /api/pdf/Reduce:
    post:
      operationId: Reduce
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfReduceParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfReduceParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfReduceParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfReduceParameters'
        description: A PdfReduceParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfReduceResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfReduceResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfReduceResponse'
          description: Success
      summary: Reduces the size of a previously uploaded document.
      tags:
      - PDF
  /api/pdf/RemovePageFormFields:
    post:
      operationId: RemovePageFormFields
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfRemovePageFormFieldsParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfRemovePageFormFieldsParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfRemovePageFormFieldsParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfRemovePageFormFieldsParameters'
        description: A PdfRemovePageFormFieldsParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfRemovePageFormFieldsResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfRemovePageFormFieldsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfRemovePageFormFieldsResponse'
          description: Success
      summary: Removes the form fields from a page range of a previously uploaded
        document.
      tags:
      - PDF
  /api/pdf/ReorderPages:
    post:
      operationId: ReorderPages
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfReorderPagesParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfReorderPagesParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfReorderPagesParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfReorderPagesParameters'
        description: A PdfReorderPagesParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfReorderPagesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfReorderPagesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfReorderPagesResponse'
          description: Success
      summary: Reorders pages of a previously uploaded document.
      tags:
      - PDF
  /api/pdf/RepairDocument:
    post:
      operationId: RepairDocument
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfRepairDocumentParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfRepairDocumentParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfRepairDocumentParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfRepairDocumentParameters'
        description: A PdfRepairDocumentParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfRepairDocumentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfRepairDocumentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfRepairDocumentResponse'
          description: Success
      summary: Repairs a previously uploaded PDF document.
      tags:
      - PDF
  /api/pdf/RotatePageStandard:
    post:
      operationId: RotatePageStandard
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfRotatePageStandardParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfRotatePageStandardParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfRotatePageStandardParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfRotatePageStandardParameters'
        description: A PdfRotatePageStandardParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfRotatePageStandardResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfRotatePageStandardResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfRotatePageStandardResponse'
          description: Success
      summary: Rotates (standardly) a page range from a previously uploaded document.
      tags:
      - PDF
  /api/pdf/SaveAsJPEG:
    post:
      operationId: SaveAsJPEG
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
        description: A PdfSaveAsJPEGParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSaveAsJPEGResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsJPEGResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsJPEGResponse'
          description: Success
      summary: Saves a previously uploaded document as JPEG.
      tags:
      - PDF
  /api/pdf/SaveAsJPEGFile:
    post:
      operationId: SaveAsJPEGFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsJPEGParameters'
        description: A PdfSaveAsJPEGParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded document as JPEG.
      tags:
      - PDF
  /api/pdf/SaveAsPNG:
    post:
      operationId: SaveAsPNG
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
        description: A PdfSaveAsPNGParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSaveAsPNGResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsPNGResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsPNGResponse'
          description: Success
      summary: Saves a previously uploaded document as PNG.
      tags:
      - PDF
  /api/pdf/SaveAsPNGFile:
    post:
      operationId: SaveAsPNGFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsPNGParameters'
        description: A PdfSaveAsPNGParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded document as PNG.
      tags:
      - PDF
  /api/pdf/SaveAsTIFF:
    post:
      operationId: SaveAsTIFF
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
        description: A PdfSaveAsTIFFParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSaveAsTIFFResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsTIFFResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsTIFFResponse'
          description: Success
      summary: Saves a previously uploaded document as TIFF.
      tags:
      - PDF
  /api/pdf/SaveAsTIFFFile:
    post:
      operationId: SaveAsTIFFFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFParameters'
        description: A PdfSaveAsTIFFParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded document as TIFF.
      tags:
      - PDF
  /api/pdf/SaveAsTIFFMultipage:
    post:
      operationId: SaveAsTIFFMultipage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
        description: A PdfSaveAsTIFFMultipageParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSaveAsTIFFMultipageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsTIFFMultipageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSaveAsTIFFMultipageResponse'
          description: Success
      summary: Saves a previously uploaded document as multipage TIFF.
      tags:
      - PDF
  /api/pdf/SaveAsTIFFMultipageFile:
    post:
      operationId: SaveAsTIFFMultipageFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveAsTIFFMultipageParameters'
        description: A PdfSaveAsTIFFMultipageParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded document as multipage TIFF.
      tags:
      - PDF
  /api/pdf/SaveDocument:
    post:
      operationId: SaveDocument
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
        description: A PdfSaveDocumentParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSaveDocumentResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSaveDocumentResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSaveDocumentResponse'
          description: Success
      summary: Saves a previously uploaded document as PDF.
      tags:
      - PDF
  /api/pdf/SaveDocumentToFile:
    post:
      operationId: SaveDocumentToFile
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSaveDocumentParameters'
        description: A PdfSaveDocumentParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                format: binary
                type: string
            text/json:
              schema:
                format: binary
                type: string
          description: Success
      summary: Saves a previously uploaded document as PDF.
      tags:
      - PDF
  /api/pdf/ScalePage:
    post:
      operationId: ScalePage
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfScalePageParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfScalePageParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfScalePageParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfScalePageParameters'
        description: A PdfScalePage object specifying the parameters of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfScalePageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfScalePageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfScalePageResponse'
          description: Success
      summary: Scales a page range from a previously uploaded document.
      tags:
      - PDF
  /api/pdf/SetInfo:
    post:
      operationId: SetInfo
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSetInfoParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSetInfoParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSetInfoParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSetInfoParameters'
        description: A PdfSetInfoParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSetInfoResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSetInfoResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSetInfoResponse'
          description: Success
      summary: Sets information to a previously uploaded document.
      tags:
      - PDF
  /api/pdf/SetInitialView:
    post:
      operationId: SetInitialView
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSetInitialViewParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSetInitialViewParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSetInitialViewParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSetInitialViewParameters'
        description: A PdfsetInitialViewParameters object specifying the parameters
          of the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSetInitialViewResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSetInitialViewResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSetInitialViewResponse'
          description: Success
      summary: Sets various document level initial view options to a previously uploaded
        document.
      tags:
      - PDF
  /api/pdf/SetPageBox:
    post:
      operationId: SetPageBox
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSetPageBoxParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSetPageBoxParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSetPageBoxParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSetPageBoxParameters'
        description: A PdfSetPageBoxParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSetPageBoxResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSetPageBoxResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSetPageBoxResponse'
          description: Success
      summary: Sets pagebox to a page range from previously uploaded document.
      tags:
      - PDF
  /api/pdf/SetPassword:
    post:
      operationId: SetPassword
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSetPasswordParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSetPasswordParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSetPasswordParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSetPasswordParameters'
        description: A PdfSetPasswordParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSetPasswordResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSetPasswordResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSetPasswordResponse'
          description: Success
      summary: Unprotects a previously uploaded document.
      tags:
      - PDF
  /api/pdf/Split:
    post:
      operationId: Split
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSplitParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSplitParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSplitParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSplitParameters'
        description: A PdfSplitParameters object specifying the parameters of the
          action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSplitResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSplitResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSplitResponse'
          description: Success
      summary: Splits a previously uploaded document into new ones.
      tags:
      - PDF
  /api/pdf/SwapPages:
    post:
      operationId: SwapPages
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfSwapPagesParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfSwapPagesParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfSwapPagesParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfSwapPagesParameters'
        description: A PdfSwapPagesParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfSwapPagesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfSwapPagesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfSwapPagesResponse'
          description: Success
      summary: Swaps two pages from a previously uploaded document.
      tags:
      - PDF
  /api/pdf/Unprotect:
    post:
      operationId: Unprotect
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PdfUnprotectParameters'
          application/json:
            schema:
              $ref: '#/components/schemas/PdfUnprotectParameters'
          text/json:
            schema:
              $ref: '#/components/schemas/PdfUnprotectParameters'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PdfUnprotectParameters'
        description: A PdfUnprotectParameters object specifying the parameters of
          the action.
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PdfUnprotectResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PdfUnprotectResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PdfUnprotectResponse'
          description: Success
      summary: Unprotects a previously uploaded document.
      tags:
      - PDF
components:
  requestBodies:
    inline_object_1:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object_1'
    inline_object:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object'
  schemas:
    PassportPDFStatus:
      description: Specifies a PassportPDF status.
      enum:
      - OK
      - ActionTimedOut
      - EmptyParameter
      - InvalidAPIKey
      - NotEnoughTokens
      - GenericError
      - InvalidParameter
      - InvalidColor
      - OutOfMemory
      - NotImplemented
      - FileNotFound
      - AccessDenied
      - CanNotImportFileToPDF
      - PdfCanNotBeDecrypted
      - PdfOperationNotAllowed
      - PdfCanNotOpenFile
      - PdfCanNotSaveFile
      - CanNotCreateFile
      - NoDocumentProvided
      - CanNotRemovePage
      - CanNotSwapPages
      - CanNotMovePage
      - CanNotRotatePage
      - CanNotFlipPage
      - InvalidPageRange
      - CanNotReducePDF
      - CanNotAutoDeskew
      - CanNotSplit
      - CanNotSaveAsJPEG
      - CanNotDigiSign
      - CanNotProtect
      - CanNotConvertToPDFA
      - CanNotAnnotate
      - CanNotClearPage
      - CanNotMerge
      - CanNotGetPageThumbnail
      - CanNotGetDocumentPreview
      - CanNotRemovePageFormFields
      - CanNotInsertImage
      - CanNotDrawImage
      - CanNotInsertPageNumber
      - CanNotInsertText
      - CanNotReadBarcode
      - CanNotFlatten
      - CanNotExportMoreThan2GigabyteFile
      - CanNotOpenSession
      - UnknownOrExpiredSession
      - CanNotSaveFile
      - CanNotRepairPDF
      - UnsupportedImageFormat
      - CanNotOCR
      - CanNotOpenImage
      - CanNotSaveAsPNG
      - CanNotSaveAsTIFF
      - CanNotSaveAsTIFFMultipage
      - CanNotSetInfo
      - CanNotSetPageBox
      - CanNotExtractPage
      - CanNotInsertNewPage
      - CanNotClonePage
      - CanNotSetInitialView
      - CanNotAdjust
      - CanNotResize
      - CanNotFilter
      - CanNotCleanupDocument
      - UnknownDocumentFormat
      - CanNotCrop
      - CanNotRotate
      - CanNotDetectColor
      - CanNotConvertColorDepth
      - PdfCanNotAddFont
      - ActionExecutionRejected
      - CanNotExtractText
      - CanNotDetectBlankPages
      - CanNotMICR
      - CanNotDetectPageOrientation
      - CanNotDeletePage
      - CanNotSaveAsPDF
      - CanNotExtractImage
      - CanNotCloneImageRegion
      - CanNotReorderPages
      - CanNotAutoCrop
      - CanNotScalePage
      - CanNotMergePages
      type: string
    Error:
      description: Contains all the information related to an error which has occured.
      example:
        InternalErrorId: InternalErrorId
        ExtResultStatus: ExtResultStatus
        ExtResultMessage: ExtResultMessage
      properties:
        ResultCode:
          $ref: '#/components/schemas/PassportPDFStatus'
        ExtResultStatus:
          description: Specifies a result code related to an error which occured in
            an external component.
          nullable: true
          readOnly: true
          type: string
        ExtResultMessage:
          description: Specifies a message which further describes the error.
          nullable: true
          type: string
        InternalErrorId:
          description: Specifies a unique identifier, allowing to easily assess the
            error.
          nullable: true
          type: string
      type: object
    LongResponse:
      description: Represents a long response.
      example:
        Value: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        Value:
          description: The response value.
          format: int64
          readOnly: true
          type: integer
      type: object
    IntegerResponse:
      description: Represents an integer response.
      example:
        Value: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        Value:
          description: The response value.
          format: int32
          readOnly: true
          type: integer
      type: object
    FontStyle:
      description: Defines the different available font styles.
      enum:
      - Regular
      - Bold
      - Italic
      - BoldItalic
      type: string
    Font:
      description: Represents a font.
      example:
        FamilyName: FamilyName
      properties:
        FontStyle:
          $ref: '#/components/schemas/FontStyle'
        FamilyName:
          description: 'Specifies the family name of the font, i.e: "Arial".'
          nullable: true
          type: string
      type: object
    StringArrayResponse:
      description: Represents a string array response.
      example:
        Value:
        - Value
        - Value
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        Value:
          description: The response value.
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
      type: object
    DocumentCloseParameters:
      description: Represents the parameters for a close document action.
      example:
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
      required:
      - FileId
      type: object
    DocumentCloseResponse:
      description: Represents the response to a close document action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    GetDocumentPreviewParameters:
      description: Represents the parameters for a get document preview action.
      example:
        ThumbnailBackgroundColor: rgba(0,0,0,0)
        ThumbnailHeight: 6
        FileName: FileName
        ThumbnailWidth: 0
        FileId: FileId
        FileData: FileData
        ThumbnailFitToPageSize: true
      properties:
        FileId:
          description: Specifies the identifier of the file to be previewed.
          nullable: true
          type: string
        FileData:
          description: Specifies the data of the document to be previewed.
          format: byte
          nullable: true
          type: string
        FileName:
          description: Specifies the name of the file to be previewed.
          type: string
        ThumbnailWidth:
          default: 140
          description: Specifies, in pixels, the width of the thumbnail to be retrieved.
          format: int32
          type: integer
        ThumbnailHeight:
          default: 220
          description: Specifies, in pixels, the height of the thumbnail to be retrieved.
          format: int32
          type: integer
        ThumbnailBackgroundColor:
          default: rgba(0,0,0,0)
          description: 'Specifies the background color of the thumbnail, using the
            color name (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
        ThumbnailFitToPageSize:
          default: true
          description: Specifies if the size of the produced thumbnail is automatically
            adjusted to don't have any margin.
          type: boolean
      required:
      - FileName
      type: object
    DocumentFormat:
      description: Specifies the format of a document.
      enum:
      - UNKNOWN
      - ICO
      - BMP
      - WBMP
      - JPEG
      - GIF
      - PNG
      - TIFF
      - FAXG3
      - EXIF
      - EMF
      - WMF
      - JNG
      - KOALA
      - IFF
      - MNG
      - PCD
      - PCX
      - PBM
      - PBMRAW
      - PFM
      - PGM
      - PGMRAW
      - PPM
      - PPMRAW
      - RAS
      - TARGA
      - PSD
      - CUT
      - XBM
      - XPM
      - DDS
      - HDR
      - SGI
      - EXR
      - J2K
      - JP2
      - PICT
      - RAW
      - WEBP
      - DICOM
      - JBIG
      - JBIG2
      - WSQ
      - PDF
      - SVG
      - TXT
      - DOCX
      - RTF
      - DXF
      - ODT
      - XLSX
      - PPTX
      type: string
    DocumentGetPreviewResponse:
      description: Represents the response to a get document preview action request.
      example:
        PageCount: 6
        ThumbnailData: ThumbnailData
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageCount:
          description: Specifies the page count of the document.
          format: int32
          readOnly: true
          type: integer
        ThumbnailData:
          description: Specifies the data of a thumbnail from the first page of the
            document, in PNG format.
          format: byte
          nullable: true
          readOnly: true
          type: string
        DocumentFormat:
          $ref: '#/components/schemas/DocumentFormat'
      type: object
    DocumentAlignment:
      enum:
      - MiddleLeft
      - MiddleRight
      - MiddleCenter
      - TopLeft
      - TopRight
      - TopCenter
      - BottomLeft
      - BottomRight
      - BottomCenter
      type: string
    DocumentPosition:
      enum:
      - MiddleLeft
      - MiddleRight
      - MiddleCenter
      - TopLeft
      - TopRight
      - TopCenter
      - BottomLeft
      - BottomRight
      - BottomCenter
      type: string
    LinkAnnotationClickBehaviour:
      enum:
      - Default
      - ClickNavigation
      - DoubleClickNavigation
      type: string
    ViewerZoomMode:
      enum:
      - ZoomMode100
      - ZoomModeFitToViewer
      - ZoomModeWidthViewer
      - ZoomModeCustom
      - ZoomModeHeightViewer
      - ZoomModeToViewer
      - ZoomModeShrinkToViewerWidth
      type: string
    RotateFlip:
      enum:
      - RotateNoneFlipNone
      - Rotate90FlipNone
      - Rotate180FlipNone
      - Rotate270FlipNone
      - RotateNoneFlipX
      - Rotate90FlipX
      - Rotate180FlipX
      - Rotate270FlipX
      type: string
    PageViewMode:
      description: Defines how the pages are displayed on the screen.
      enum:
      - SinglePageView
      - MultiplePagesView
      type: string
    DocuViewareLocale:
      description: User specific locale.
      enum:
      - Auto
      - Fr
      - En
      - Ro
      - Ar
      - De
      - It
      - Tr
      - Sk
      - Cs
      - Es
      - Da
      - Ru
      - Pt
      - Nl
      - Pl
      - Hu
      - Bg
      - El
      - Zh
      - Ja
      - Sv
      - "No"
      - Ko
      - He
      - Fi
      - Sl
      type: string
    RotateMode:
      description: Specifies the rotation mode.
      enum:
      - View
      - CurrentPage
      type: string
    ToolbarStyle:
      description: Specifies the toolbar style.
      enum:
      - Auto
      - Desktop
      - Mobile
      type: string
    PrintQuality:
      description: Specifies the quality level to be used to print documents.
      enum:
      - Low
      - Medium
      - High
      - VeryHigh
      type: string
    DocuViewareCertificate:
      example:
        TimestampServerUserName: TimestampServerUserName
        TimestampServerURI: TimestampServerURI
        DisplayName: DisplayName
        Data: Data
        TimestampServerUserPassword: TimestampServerUserPassword
        Password: Password
      properties:
        DisplayName:
          nullable: true
          type: string
        Data:
          format: byte
          nullable: true
          type: string
        Password:
          nullable: true
          type: string
        TimestampServerURI:
          nullable: true
          type: string
        TimestampServerUserName:
          nullable: true
          type: string
        TimestampServerUserPassword:
          nullable: true
          type: string
      type: object
    DocuViewareControlState:
      description: Specifies configuration and appearance state of a DocuVieware control.
      example:
        AllowPrint: true
        ImageQuality: 2
        ActiveSelectedColor: '#0382D4'
        EnableRectangleAnnotationButton: true
        ShowToolbar: true
        EnableZoom100Button: true
        EnableRotateButtons: true
        ControlWidth: 100%
        ToolbarButtonsSpacing: 9
        ShowAnnotationsCommentsSnapIn: true
        DisableAnnotationPrinting: false
        EnableFullScreenButton: true
        CustomNotificationIconWarning: CustomNotificationIconWarning
        CustomNotificationIconInfo: CustomNotificationIconInfo
        ShowTextSearchSnapIn: true
        EnablePagesNavigationButtons: true
        TwainSourceBitDepth: 5
        AnnotationEditorMode: true
        ExtraFeatures: ExtraFeatures
        CollapseSnapinOnDocumentClosed: true
        ShowThumbnailsSnapIn: true
        EnableLoadFromUriButton: true
        EnableRubberStampAnnotationButton: true
        AjaxCustomHeaders: AjaxCustomHeaders
        EnableMouseModeButtons: true
        EnableThumbnailDragDrop: false
        DisableDownloadProgress: false
        RemoteIP: RemoteIP
        FileHostingURI: FileHostingURI
        MaxUploadSize: 7
        ThumbnailWidth: 2
        EnableMultipleThumbnailSelection: false
        EnableGdPictureAnnotations: true
        MaxDownloadSize: 1
        EnablePolyRulerAnnotationButton: true
        TwainSourceResolution: 5
        ShowAnnotationsSnapIn: true
        CollapsedSnapIn: false
        UserLanguages:
        - UserLanguages
        - UserLanguages
        ShowSnapInCollapseButton: true
        CustomNotificationIconQuestion: CustomNotificationIconQuestion
        FileDownloadCustomHeaders: FileDownloadCustomHeaders
        AllowedExportFormats: '*'
        EnableTextSelection: true
        EnableFitPageButton: true
        EnableFreehandAnnotationButton: true
        ControlHeight: 100%
        EnablePanModeButton: true
        EnableConnectedLineAnnotationButton: true
        ForceScrollBars: false
        TwainSourceEnableDuplex: false
        DocumentFileName: DocumentFileName
        AllowUpload: true
        EnableStickyNoteAnnotationButton: true
        TwainSourceEnableCustomConfiguration: false
        EnableFormFieldsEdition: true
        CustomNotificationIconOk: CustomNotificationIconOk
        Certificates:
        - TimestampServerUserName: TimestampServerUserName
          TimestampServerURI: TimestampServerURI
          DisplayName: DisplayName
          Data: Data
          TimestampServerUserPassword: TimestampServerUserPassword
          Password: Password
        - TimestampServerUserName: TimestampServerUserName
          TimestampServerURI: TimestampServerURI
          DisplayName: DisplayName
          Data: Data
          TimestampServerUserPassword: TimestampServerUserPassword
          Password: Password
        EnableSaveButton: true
        EnableLineAnnotationButton: true
        EnableLineArrowAnnotationButton: true
        EnableLinkAnnotationButton: true
        EnableTextSelectionAnnotation: true
        FreeHandContinuousDrawingMode: true
        TextSearchMaxResults: 4
        EnableTwainAcquisitionButton: true
        Timeout: 0
        DocumentURI: DocumentURI
        ToolbarHeight: 3
        MaxPages: 1
        EnableSelectModeButton: true
        SnapInPanelDefaultWidth: 280px
        EnablePrintToPDF: true
        PanelBackColor: '#FFFFFF'
        EnableFitWidthButton: true
        DisableAnnotationDrawingModePanel: false
        ShowDigitalSignatureSnapIn: false
        HeaderColor: '#213E4E'
        EnableRectangleHighlighterAnnotationButton: true
        TwainSourceHideUI: true
        EnableSelectedTextAnnotationEdition: true
        ShowLogo: true
        EnableFileUploadButton: true
        EnableTextAnnotationButton: true
        EnableFreehandHighlighterAnnotationButton: true
        EnableZoomButtons: true
        ZoomStep: 1
        EnableEllipseAnnotationButton: true
        ThumbnailHeight: 7
        AnnotationDropShadow: true
        ShowBookmarksSnapIn: true
        Zoom: 6.027456183070403
        ShowSnapInButtonStrip: true
        EnableDocumentsDrop: true
        CustomNotificationIconError: CustomNotificationIconError
        TwainSourceSelectFeeder: true
        ToolbarBackColor: '#F2F2F2'
        EnablePrintButton: true
        EnableMarqueeZoomModeButton: true
        EnableRulerAnnotationButton: true
        StrokeColor: '#646464'
        ShowRedactionSnapIn: true
        ShowSnapInPanelHeader: true
        EnablePageViewButtons: true
        MiscBorderColor: '#DCDCDC'
        ScrollBars: true
        EnableAnnotationActionButtons: true
        ViewerBackColor: '#565656'
        ControlID: DocuVieware1
      properties:
        Timeout:
          default: 20
          description: Specifies the amount of time, in minutes, allowed between requests
            before the DocuVieware session-state provider terminates the session.<br
            />
          format: int32
          type: integer
        ControlID:
          default: DocuVieware1
          description: Specifies client the identifier associated with the control.
          nullable: true
          type: string
        ShowLogo:
          default: true
          description: Specifies if the DocuVieware logo is displayed in the toolbar.
          type: boolean
        RemoteIP:
          default: ""
          description: Specifies the remote IP. This property can be leaved empty
            if user requests don't need to be traced.
          nullable: true
          type: string
        FileHostingURI:
          default: ""
          nullable: true
          type: string
        DocumentURI:
          default: ""
          description: "Specifies the URI of a document to load into the control.\r\
            \nThis can be an empty string if a document is already loaded.\r\nUse\
            \ the prefix 'fileid:' to load a document from a file ID handled by PassportPDF.\
            \ ie: 'fileid:00000-00000-00000-00000-00000'."
          nullable: true
          type: string
        DocumentFileName:
          default: ""
          description: "Specifies the file name of the input document. The file name\
            \ can help to determine the input document format.\r\nDefault value is\
            \ an empty string."
          nullable: true
          type: string
        DisableDownloadProgress:
          default: false
          description: A flag specifying if the control should display a loading progress
            status bar to the end user while a document is being loaded.
          type: boolean
        DocumentAlignment:
          $ref: '#/components/schemas/DocumentAlignment'
        DocumentPosition:
          $ref: '#/components/schemas/DocumentPosition'
        EnableGdPictureAnnotations:
          default: true
          description: Specifies if GdPicture/XMP annotations support is activated.
          type: boolean
        DisableAnnotationPrinting:
          default: false
          description: Specifies whether printing support is disabled for annotations.
          type: boolean
        EnableFormFieldsEdition:
          default: true
          description: Specifies whether form fields can be edited into the client
            browser or not.
          type: boolean
        AnnotationEditorMode:
          default: true
          description: Specifies the editor mode for the GdPicture/XMP annotation
            support.<br />
          type: boolean
        LinkAnnotationClickBehaviour:
          $ref: '#/components/schemas/LinkAnnotationClickBehaviour'
        Zoom:
          default: 1
          description: 'Specifies the current factor of zoom applied during page rendering
            operations: 1 for 100%, 1.5 for 150%, 2 for 200%...'
          format: double
          type: number
        ZoomMode:
          $ref: '#/components/schemas/ViewerZoomMode'
        OpenZoomMode:
          $ref: '#/components/schemas/ViewerZoomMode'
        ViewRotation:
          $ref: '#/components/schemas/RotateFlip'
        PageRotation:
          $ref: '#/components/schemas/RotateFlip'
        ZoomStep:
          default: 30
          description: Defines the percentage of increasing or decreasing level of
            zoom for 'Zoom In' and 'Zoom Out' operations.
          format: int32
          type: integer
        ScrollBars:
          default: true
          description: Specifies whether scrollbars can be displayed or not within
            the viewer.<br />
          type: boolean
        ForceScrollBars:
          default: false
          description: Specifies whether the viewer shall always show scrollbars.
          type: boolean
        PageViewMode:
          $ref: '#/components/schemas/PageViewMode'
        EnableTextSelection:
          default: true
          description: Specifies if text selection is permitted.
          type: boolean
        EnableTextSelectionAnnotation:
          default: true
          description: Specifies whether the selected text context menu options should
            contain annotations entries.
          type: boolean
        Locale:
          $ref: '#/components/schemas/DocuViewareLocale'
        UserLanguages:
          description: Specifies the different languages used by the user's browser.
          items:
            type: string
          nullable: true
          type: array
        ControlWidth:
          default: 100%
          description: Specifies the width of the control within its container.
          nullable: true
          type: string
        ControlHeight:
          default: 100%
          description: Specifies, the height of the control within its container.
          nullable: true
          type: string
        AnnotationDropShadow:
          default: true
          description: Specifies whether GdPicture/XMP annotations are rendered with
            a drop shadow effect.
          type: boolean
        AllowPrint:
          default: true
          description: Specifies whether printing is allowed.
          type: boolean
        AllowUpload:
          default: true
          description: Specifies whether file upload is allowed.
          type: boolean
        EnableMultipleThumbnailSelection:
          default: false
          description: Specifies whether multiple thumbnails selection is allowed.
          type: boolean
        EnableThumbnailDragDrop:
          default: false
          description: Specifies whether the thumbnails can be moved by drag and drop.
          type: boolean
        EnableFileUploadButton:
          default: true
          description: Specifies whether the open button shall be enabled.
          type: boolean
        EnableLoadFromUriButton:
          default: true
          description: Specifies whether the 'open from uri' button shall be enabled.
          type: boolean
        EnableSaveButton:
          default: true
          description: Specifies whether the save button shall be enabled.
          type: boolean
        EnablePagesNavigationButtons:
          default: true
          description: Specifies whether the save button shall be enabled.
          type: boolean
        EnablePrintButton:
          default: true
          description: Specifies whether the print button shall be enabled.
          type: boolean
        EnablePrintToPDF:
          default: true
          description: Specifies whether the print to pdf option shall be enabled.
          type: boolean
        EnableFitWidthButton:
          default: true
          description: Specifies whether the fit width button shall be enabled.
          type: boolean
        EnableZoom100Button:
          default: true
          description: Specifies whether the fit original size button shall be enabled.
          type: boolean
        EnableMouseModeButtons:
          default: true
          description: Specifies whether the mouse mode button group shall be enabled.
          type: boolean
        EnablePanModeButton:
          default: true
          description: Specifies whether the pan mode button shall be enabled.
          type: boolean
        EnableSelectModeButton:
          default: true
          description: Specifies whether the select mode button shall be enabled.
          type: boolean
        EnableMarqueeZoomModeButton:
          default: true
          description: Specifies whether the marquee zoom mode button shall be enabled.
          type: boolean
        EnableFullScreenButton:
          default: true
          description: Specifies whether the fullscreen button shall be enabled.
          type: boolean
        EnableFitPageButton:
          default: true
          description: Specifies whether the 'Fit Page' button shall be enabled.
          type: boolean
        EnableZoomButtons:
          default: true
          description: Specifies whether the zoom button group shall be enabled.
          type: boolean
        EnablePageViewButtons:
          default: true
          description: Specifies whether the page view mode button shall be enabled.
          type: boolean
        RotateButtonsMode:
          $ref: '#/components/schemas/RotateMode'
        EnableRotateButtons:
          default: true
          description: Specifies whether the rotation button group shall be enabled.
          type: boolean
        EnableAnnotationActionButtons:
          default: true
          description: "Specifies whether the action buttons shall be enabled when\
            \ an annotation is selected.\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableSelectedTextAnnotationEdition:
          default: true
          description: Specifies whether the selected text annotations shall be editable.
          type: boolean
        EnableRectangleHighlighterAnnotationButton:
          default: true
          description: "Specifies whether the rectangle highlighter annotation button\
            \ shall be enabled. <br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableFreehandHighlighterAnnotationButton:
          default: true
          description: "Specifies whether the freehand highlighter annotation button\
            \ shall be enabled.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableRubberStampAnnotationButton:
          default: true
          description: "Specifies whether the rubber stamp annotation button shall\
            \ be enabled.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableRectangleAnnotationButton:
          default: true
          description: "Specifies whether the rectangle annotation button shall be\
            \ enabled.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableEllipseAnnotationButton:
          default: true
          description: "Specifies whether the ellipse annotation button shall be enabled.<br\
            \ />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableLineAnnotationButton:
          default: true
          description: "Specifies whether the line annotation button shall be enabled.<br\
            \ />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableConnectedLineAnnotationButton:
          default: true
          description: "Specifies whether the connected line annotation button shall\
            \ be enabled.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableFreehandAnnotationButton:
          default: true
          description: "Specifies whether the freehand annotation button shall be\
            \ enabled.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableLineArrowAnnotationButton:
          default: true
          description: "Specifies whether the line arrow annotation button shall be\
            \ enabled.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableLinkAnnotationButton:
          default: true
          description: "Specifies whether the link annotation button shall be enabled.<br\
            \ />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableRulerAnnotationButton:
          default: true
          description: "Specifies whether the ruler annotation button shall be enabled.<br\
            \ />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnablePolyRulerAnnotationButton:
          default: true
          type: boolean
        EnableTextAnnotationButton:
          default: true
          description: "Specifies whether the text annotation button shall be enabled.<br\
            \ />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableStickyNoteAnnotationButton:
          default: true
          description: "Specifies whether the sticky note annotation button shall\
            \ be enabled.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        EnableTwainAcquisitionButton:
          default: true
          description: Specifies whether the TWAIN acquisition button shall be enabled.
          type: boolean
        TwainSourceEnableCustomConfiguration:
          default: false
          description: Enables the custom configuration support for the TWAIN source.
          type: boolean
        TwainSourceSelectFeeder:
          default: true
          description: "Specifies whether the TWAIN acquisition source shall acquire\
            \ from the document feeder or the flatbed.\r\nThis property is only effective\
            \ if TwainSourceSetCustomConfiguration is set to true."
          type: boolean
        TwainSourceBitDepth:
          default: 24
          description: "Specifies the bit depth the TWAIN acquisition source should\
            \ acquire at. <br />\r\nThis property is only effective if TwainSourceSetCustomConfiguration\
            \ is set to true."
          format: int32
          type: integer
        TwainSourceResolution:
          default: 200
          description: "Specifies the resolution the TWAIN acquisition source should\
            \ acquire at. <br />\r\nThis property is only effective if TwainSourceSetCustomConfiguration\
            \ is set to true."
          format: int32
          type: integer
        TwainSourceEnableDuplex:
          default: false
          description: "Specifies whether the TWAIN acquisition source shall enable\
            \ duplex acquisition. <br />\r\nThis property is only effective if TwainSourceSetCustomConfiguration\
            \ is set to true."
          type: boolean
        TwainSourceHideUI:
          default: true
          description: "Specifies whether the TWAIN acquisition source shall hide\
            \ or show the device driver user interface before acquisition. <br />\r\
            \nThis property is only effective if TwainSourceSetCustomConfiguration\
            \ is set to true."
          type: boolean
        FreeHandContinuousDrawingMode:
          default: true
          description: "Specifies whether the drawing mode for freehand annotation\
            \ is multi line or not.<br />\r\nThis property is only effective if EnableGdPictureAnnotations\
            \ is set to true."
          type: boolean
        ShowTextSearchSnapIn:
          default: true
          description: Specifies whether the text search SnapIn is enabled.
          type: boolean
        ShowThumbnailsSnapIn:
          default: true
          description: Specifies whether the Thumbnails SnapIn is enabled.
          type: boolean
        ShowBookmarksSnapIn:
          default: true
          description: Specifies whether the Bookmarks SnapIn is enabled.
          type: boolean
        ShowAnnotationsSnapIn:
          default: true
          description: Specifies whether the annotations SnapIn is enabled.
          type: boolean
        ShowAnnotationsCommentsSnapIn:
          default: true
          description: Specifies whether the Annotations Comments SnapIn is enabled.
          type: boolean
        ShowRedactionSnapIn:
          default: true
          description: "Specifies whether the Redaction Snap-In is enabled or not.\r\
            \n<remarks>\r\nDefault value is true.\r\n</remarks>"
          type: boolean
        ShowDigitalSignatureSnapIn:
          default: false
          description: "Specifies whether the Digital Signature Snap-In is enabled\
            \ or not.\r\n<remarks>\r\nDefault value is false.\r\n</remarks>"
          type: boolean
        ThumbnailWidth:
          default: 192
          description: The width, in pixels, of each thumbnail.
          format: int32
          type: integer
        ThumbnailHeight:
          default: 256
          description: The height, in pixels, of each thumbnail.
          format: int32
          type: integer
        SnapInPanelDefaultWidth:
          default: 280px
          description: Specifies the Snap-in panel default width.
          nullable: true
          type: string
        CollapsedSnapIn:
          default: false
          description: Specifies whether the Snap-in panel is collapsed or not.
          type: boolean
        CollapseSnapinOnDocumentClosed:
          default: true
          description: Specifies whether the Snap-in panel should be automatically
            collapsed when the displayed document is closed.
          type: boolean
        ShowSnapInCollapseButton:
          default: true
          description: Specifies whether the button that collapses the Snap-in panel
            is displayed or not.
          type: boolean
        ShowSnapInPanelHeader:
          default: true
          description: Specifies whether the header of the Snap-in panel is displayed
            or not.
          type: boolean
        ShowSnapInButtonStrip:
          default: true
          description: Specifies whether the Snap-in button strip is displayed or
            not.
          type: boolean
        ShowToolbar:
          default: true
          description: Specifies whether the Toolbars are visible or not.
          type: boolean
        ToolbarStyle:
          $ref: '#/components/schemas/ToolbarStyle'
        ToolbarButtonsSpacing:
          default: 12
          description: The space, in pixels, between each button of the toolbar.
          format: int32
          type: integer
        ToolbarHeight:
          default: 48
          description: The height, in pixels, of the toolbar.
          format: int32
          type: integer
        StrokeColor:
          default: '#646464'
          description: Specifies the color used to stroke viewer elements such borders,
            toolbar icons and thumbnail text.
          nullable: true
          type: string
        MiscBorderColor:
          default: '#DCDCDC'
          description: Specifies the color used to define dropdowns borders, buttons
            separators, line separators.
          nullable: true
          type: string
        HeaderColor:
          default: '#213E4E'
          description: Specifies the color used in both dialogs and snap-ins headers.
          nullable: true
          type: string
        PanelBackColor:
          default: '#FFFFFF'
          description: Specifies the color used in both dialogs and snap-ins body
            background.
          nullable: true
          type: string
        ViewerBackColor:
          default: '#565656'
          description: Specifies the viewer area background color.
          nullable: true
          type: string
        ActiveSelectedColor:
          default: '#0382D4'
          description: Specifies the selected and active elements stroke color.
          nullable: true
          type: string
        ToolbarBackColor:
          default: '#F2F2F2'
          description: Viewer Toolbar Background Color.
          nullable: true
          type: string
        CustomNotificationIconError:
          default: ""
          description: "Custom error notification icon.<br />\r\nUsed to specify a\
            \ custom icon within errors notification boxes."
          nullable: true
          type: string
        CustomNotificationIconQuestion:
          default: ""
          description: "Custom question notification icon.<br />\r\nUsed to specify\
            \ a custom icon within questions notification boxes."
          nullable: true
          type: string
        CustomNotificationIconWarning:
          default: ""
          description: "Custom warning notification icon.<br />\r\nUsed to specify\
            \ a custom icon within warnings notification boxes."
          nullable: true
          type: string
        CustomNotificationIconInfo:
          default: ""
          description: "Custom info notification icon.<br />\r\nUsed to specify a\
            \ custom icon within information notification boxes."
          nullable: true
          type: string
        CustomNotificationIconOk:
          default: ""
          description: "Custom success notification icon.<br />\r\nUsed to specify\
            \ a custom icon within success notification boxes."
          nullable: true
          type: string
        AllowedExportFormats:
          default: '*'
          description: "Specifies extensions of the allowed formats for export. Each\
            \ extension must be separated by a coma.<br />\r\nWildcard character '*'\
            \ can be used to specify any supported format.<br />\r\nThe following\
            \ extensions are currently supported: \"PDF\", \"TIFF\".<br />\r\nFor\
            \ example use \"*\" to allow all supported format for export, \"PDF\"\
            \ to allow only PDF export and \"PDF,TIFF\" to allow PDF and TIFF export."
          nullable: true
          type: string
        DisableAnnotationDrawingModePanel:
          default: false
          description: "Specifies whether the drawing mode panel shall be enabled\
            \ while user is drawing a free hand annotation.<br />\r\nThis property\
            \ is only effective if EnableGdPictureAnnotations is set to true."
          type: boolean
        ImageQuality:
          default: 10
          format: int32
          type: integer
        PrintQuality:
          $ref: '#/components/schemas/PrintQuality'
        EnableDocumentsDrop:
          default: true
          description: Specifies whether documents drag & drop is allowed into the
            viewer area.
          type: boolean
        AjaxCustomHeaders:
          default: ""
          description: "Specifies custom headers for the generated AJAX requests.\r\
            \nValue must be a (properly escaped) JSON-formatted string. Default value\
            \ is null."
          nullable: true
          type: string
        FileDownloadCustomHeaders:
          default: ""
          description: "Specifies custom headers to be used for the file download\
            \ JavaScript API requests (for instance LoadFromUri and LoadFromUriEx).\
            \ Headers that are set through this property won't be exposed client-side.\r\
            \nValue must be a (properly escaped) JSON-formatted string. Default value\
            \ is null."
          nullable: true
          type: string
        TextSearchMaxResults:
          default: 100
          description: Specifies the maximum number of results provided by a text
            search request.
          format: int32
          type: integer
        MaxUploadSize:
          default: 10485760
          description: Specifies, in bytes, the upload size limit.
          format: int32
          type: integer
        MaxDownloadSize:
          default: 10485760
          description: Specifies, in bytes, the download size limit.
          format: int32
          type: integer
        MaxPages:
          default: 3000
          description: Specifies the maximum of pages per loaded document.
          format: int32
          type: integer
        Certificates:
          description: Specifies a list of certificates to be made available on the
            client side to apply digital signature to documents.
          items:
            $ref: '#/components/schemas/DocuViewareCertificate'
          nullable: true
          type: array
        ExtraFeatures:
          default: ""
          description: A formatted string specifying undocumented extra features to
            handle.
          nullable: true
          type: string
      type: object
    DocuViewareGetControlParameters:
      description: Represents the parameters for a GetControl action.
      example:
        ControlState:
          AllowPrint: true
          ImageQuality: 2
          ActiveSelectedColor: '#0382D4'
          EnableRectangleAnnotationButton: true
          ShowToolbar: true
          EnableZoom100Button: true
          EnableRotateButtons: true
          ControlWidth: 100%
          ToolbarButtonsSpacing: 9
          ShowAnnotationsCommentsSnapIn: true
          DisableAnnotationPrinting: false
          EnableFullScreenButton: true
          CustomNotificationIconWarning: CustomNotificationIconWarning
          CustomNotificationIconInfo: CustomNotificationIconInfo
          ShowTextSearchSnapIn: true
          EnablePagesNavigationButtons: true
          TwainSourceBitDepth: 5
          AnnotationEditorMode: true
          ExtraFeatures: ExtraFeatures
          CollapseSnapinOnDocumentClosed: true
          ShowThumbnailsSnapIn: true
          EnableLoadFromUriButton: true
          EnableRubberStampAnnotationButton: true
          AjaxCustomHeaders: AjaxCustomHeaders
          EnableMouseModeButtons: true
          EnableThumbnailDragDrop: false
          DisableDownloadProgress: false
          RemoteIP: RemoteIP
          FileHostingURI: FileHostingURI
          MaxUploadSize: 7
          ThumbnailWidth: 2
          EnableMultipleThumbnailSelection: false
          EnableGdPictureAnnotations: true
          MaxDownloadSize: 1
          EnablePolyRulerAnnotationButton: true
          TwainSourceResolution: 5
          ShowAnnotationsSnapIn: true
          CollapsedSnapIn: false
          UserLanguages:
          - UserLanguages
          - UserLanguages
          ShowSnapInCollapseButton: true
          CustomNotificationIconQuestion: CustomNotificationIconQuestion
          FileDownloadCustomHeaders: FileDownloadCustomHeaders
          AllowedExportFormats: '*'
          EnableTextSelection: true
          EnableFitPageButton: true
          EnableFreehandAnnotationButton: true
          ControlHeight: 100%
          EnablePanModeButton: true
          EnableConnectedLineAnnotationButton: true
          ForceScrollBars: false
          TwainSourceEnableDuplex: false
          DocumentFileName: DocumentFileName
          AllowUpload: true
          EnableStickyNoteAnnotationButton: true
          TwainSourceEnableCustomConfiguration: false
          EnableFormFieldsEdition: true
          CustomNotificationIconOk: CustomNotificationIconOk
          Certificates:
          - TimestampServerUserName: TimestampServerUserName
            TimestampServerURI: TimestampServerURI
            DisplayName: DisplayName
            Data: Data
            TimestampServerUserPassword: TimestampServerUserPassword
            Password: Password
          - TimestampServerUserName: TimestampServerUserName
            TimestampServerURI: TimestampServerURI
            DisplayName: DisplayName
            Data: Data
            TimestampServerUserPassword: TimestampServerUserPassword
            Password: Password
          EnableSaveButton: true
          EnableLineAnnotationButton: true
          EnableLineArrowAnnotationButton: true
          EnableLinkAnnotationButton: true
          EnableTextSelectionAnnotation: true
          FreeHandContinuousDrawingMode: true
          TextSearchMaxResults: 4
          EnableTwainAcquisitionButton: true
          Timeout: 0
          DocumentURI: DocumentURI
          ToolbarHeight: 3
          MaxPages: 1
          EnableSelectModeButton: true
          SnapInPanelDefaultWidth: 280px
          EnablePrintToPDF: true
          PanelBackColor: '#FFFFFF'
          EnableFitWidthButton: true
          DisableAnnotationDrawingModePanel: false
          ShowDigitalSignatureSnapIn: false
          HeaderColor: '#213E4E'
          EnableRectangleHighlighterAnnotationButton: true
          TwainSourceHideUI: true
          EnableSelectedTextAnnotationEdition: true
          ShowLogo: true
          EnableFileUploadButton: true
          EnableTextAnnotationButton: true
          EnableFreehandHighlighterAnnotationButton: true
          EnableZoomButtons: true
          ZoomStep: 1
          EnableEllipseAnnotationButton: true
          ThumbnailHeight: 7
          AnnotationDropShadow: true
          ShowBookmarksSnapIn: true
          Zoom: 6.027456183070403
          ShowSnapInButtonStrip: true
          EnableDocumentsDrop: true
          CustomNotificationIconError: CustomNotificationIconError
          TwainSourceSelectFeeder: true
          ToolbarBackColor: '#F2F2F2'
          EnablePrintButton: true
          EnableMarqueeZoomModeButton: true
          EnableRulerAnnotationButton: true
          StrokeColor: '#646464'
          ShowRedactionSnapIn: true
          ShowSnapInPanelHeader: true
          EnablePageViewButtons: true
          MiscBorderColor: '#DCDCDC'
          ScrollBars: true
          EnableAnnotationActionButtons: true
          ViewerBackColor: '#565656'
          ControlID: DocuVieware1
        SessionID: SessionID
      properties:
        SessionID:
          description: Specifies the unique identifier used to identify the user session.
          type: string
        ControlState:
          $ref: '#/components/schemas/DocuViewareControlState'
      required:
      - ControlState
      - SessionID
      type: object
    DocuViewareGetControlResponse:
      description: Represents the response to a get control action request.
      example:
        Element: Element
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        Element:
          description: The element content, as HTML format.
          nullable: true
          readOnly: true
          type: string
      type: object
    StringResponse:
      description: Represents a string response.
      example:
        Value: Value
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        Value:
          description: The response value.
          nullable: true
          readOnly: true
          type: string
      type: object
    DocuViewareSaveParameters:
      description: Represents the parameters for a Save action.
      example:
        Format: Format
        FileName: FileName
        SessionId: SessionId
        ControlId: ControlId
        PageRange: '*'
      properties:
        SessionId:
          description: Specifies the unique identifier used to identify the user session.
          type: string
        ControlId:
          description: Specifies the identifier associated with the control.
          type: string
        FileName:
          description: Specifies the name of the file to create.
          type: string
        Format:
          description: "Specifies the format of the document to save.\r\nSupported\
            \ values are tiff, pdf, pdf/a, pdf/a1a, pdf/a1b, pdf/a2a, pdf/a2b, pdf/a2u,\
            \ pdf/a3a, pdf/a3b, pdf/a3u."
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved into the new file.
          nullable: true
          type: string
      required:
      - ControlId
      - FileName
      - Format
      - SessionId
      type: object
    DocuViewareSaveResponse:
      description: Represents the response to a save as JPEG action request.
      example:
        ContentType: ContentType
        Content: Content
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        Content:
          description: Specifies the data of the produced file.
          format: byte
          nullable: true
          readOnly: true
          type: string
        ContentType:
          description: Specifies content type of the produced data.
          nullable: true
          readOnly: true
          type: string
      type: object
    ImageAdjustParameters:
      description: Represents the parameters for an image adjustment action.
      example:
        AutoContrastEnhancement: false
        ContrastHistogramStretch: false
        RoiTop: 6
        Brightness: 2
        RoiWidth: 1
        Saturation: 9
        RoiLeft: 0
        GammaCorrection: 5
        FileId: FileId
        RoiHeight: 5
        Contrast: 7
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            adjust.
          type: string
        RoiLeft:
          default: 0
          description: Specifies the left coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiTop:
          default: 0
          description: Specifies the top coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiWidth:
          default: 0
          description: Specifies the width, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        RoiHeight:
          default: 0
          description: Specifies the height, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        GammaCorrection:
          default: 0
          description: Specifies the gamma correction parameter.
          format: int32
          type: integer
        Brightness:
          default: 0
          description: Specifies the brightness parameter.
          format: int32
          type: integer
        Contrast:
          default: 0
          description: Specifies the contrast parameter.
          format: int32
          type: integer
        Saturation:
          default: 0
          description: Specifies the saturation parameter.
          format: int32
          type: integer
        AutoContrastEnhancement:
          default: false
          description: Specifies whether the contrast shall be automatically enhanced.
          type: boolean
        ContrastHistogramStretch:
          default: false
          description: Specifies whether a contrast histogram stretch filter shall
            be performed.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    ImageAdjustResponse:
      description: Represents the response to an image adjustment action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageAutoCropParameters:
      description: Represents the parameters for an image auto cropping action.
      example:
        Confidence: 0.8008282
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            crop.
          type: string
        Confidence:
          default: 92
          description: Specifies the confidence threshold in percentage.
          format: float
          type: number
      required:
      - FileId
      - PageRange
      type: object
    ImageAutoCropResponse:
      description: Represents the response to an image auto cropping action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageCleanupDocumentParameters:
      description: Represents the parameters for a cleanup document action.
      example:
        DespeckleStrength: 0
        Deskew: false
        RemoveBottomMarginPunchHoles: false
        RemoveTopMarginPunchHoles: false
        RemoveBlackBorders: false
        RemoveLeftMarginPunchHoles: false
        RemoveRightMarginPunchHoles: false
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            cleanup.
          type: string
        RemoveBlackBorders:
          default: false
          description: Specifies whether the dark borders of the document image shall
            be replaced with white content.
          type: boolean
        Deskew:
          default: false
          description: Specifies whether the document shall be deskewed.
          type: boolean
        RemoveLeftMarginPunchHoles:
          default: false
          description: Specifies whether punch holes shall be removed from the left
            margin of the document.
          type: boolean
        RemoveTopMarginPunchHoles:
          default: false
          description: Specifies whether punch holes shall be removed from the top
            margin of the document.
          type: boolean
        RemoveRightMarginPunchHoles:
          default: false
          description: Specifies whether punch holes shall be removed from the right
            margin of the document.
          type: boolean
        RemoveBottomMarginPunchHoles:
          default: false
          description: Specifies whether punch holes shall be removed from the bottom
            margin of the document.
          type: boolean
        DespeckleStrength:
          default: 0
          description: Specifies the strength of the despeckle filter to be applied
            on the image.
          format: int32
          type: integer
      required:
      - FileId
      - PageRange
      type: object
    ImageCleanupDocumentResponse:
      description: Represents the response to a cleanup document action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageRegion:
      description: Represents a region of a given page of an image.
      example:
        Left: 1
        Top: 5
        PageNumber: 6
        Height: 2
        Width: 5
      properties:
        PageNumber:
          description: Specifies the number of the page.
          format: int32
          type: integer
        Left:
          description: Specifies, in pixels, the left coordinate of the region.
          format: int32
          type: integer
        Top:
          description: Specifies, in pixels, the top coordinate of the region.
          format: int32
          type: integer
        Width:
          description: Specifies, in pixels, the width of the region.
          format: int32
          type: integer
        Height:
          description: Specifies, in pixels, the height of the region.
          format: int32
          type: integer
      type: object
    ImageCloneRegionsParameters:
      description: Represents the parameters for a clone image region action.
      example:
        ImageRegions:
        - Left: 1
          Top: 5
          PageNumber: 6
          Height: 2
          Width: 5
        - Left: 1
          Top: 5
          PageNumber: 6
          Height: 2
          Width: 5
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        ImageRegions:
          description: The regions to be cloned.
          items:
            $ref: '#/components/schemas/ImageRegion'
          type: array
      required:
      - FileId
      - ImageRegions
      type: object
    ClonedImageRegion:
      description: Represents a cloned image region.
      example:
        ImageRegion:
          Left: 1
          Top: 5
          PageNumber: 6
          Height: 2
          Width: 5
        FileId: FileId
      properties:
        ImageRegion:
          $ref: '#/components/schemas/ImageRegion'
        FileId:
          description: The file identifier of the image.
          nullable: true
          type: string
      type: object
    ImageCloneRegionsResponse:
      description: Represents the response to a close image action request.
      example:
        ClonedImages:
        - ImageRegion:
            Left: 1
            Top: 5
            PageNumber: 6
            Height: 2
            Width: 5
          FileId: FileId
        - ImageRegion:
            Left: 1
            Top: 5
            PageNumber: 6
            Height: 2
            Width: 5
          FileId: FileId
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        ClonedImages:
          description: The images created as a result of the action.
          items:
            $ref: '#/components/schemas/ClonedImageRegion'
          nullable: true
          readOnly: true
          type: array
      type: object
    ImageCloseParameters:
      description: Represents the parameters for a close image action.
      example:
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
      required:
      - FileId
      type: object
    ImageCloseResponse:
      description: Represents the response to a close image action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ColorDepthConversionMethod:
      description: Specifies the modes when changing the color depth of an image.
      enum:
      - Depth1Bpp
      - Depth1BppOtsu
      - Depth1BppBradley
      - Depth1BppSauvola
      - Depth1BppFast
      - Depth4Bpp16
      - Depth4BppQ
      - Depth8BppGrayScale
      - Depth8BppGrayScaleAdv
      - Depth8Bpp216
      - Depth8BppQ
      - Depth16BppRGB555
      - Depth16BppRGB565
      - Depth24BppRGB
      - Depth32BppARGB
      - Depth32BppRGB
      - Depth32BppPARGB
      - Depth48BppRGB
      - Depth64BppARGB
      - Depth64BppPARGB
      type: string
    ImageConvertColorDepthParameters:
      description: Represents the parameters for an image color depth change action.
      example:
        Depth1BppSauvolaFactor: 1.4658129
        Depth1BppOtsuThreshold: 0
        Depth1BppBradleyThreshold: 6
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            process.
          type: string
        ConvertColorDepthMode:
          $ref: '#/components/schemas/ColorDepthConversionMethod'
        Depth1BppOtsuThreshold:
          default: 50
          description: Specifies the threshold for a conversion using the Depth1BppOtsu
            method.
          format: int32
          type: integer
        Depth1BppBradleyThreshold:
          default: 38
          description: Specifies the threshold for a conversion using the Depth1BppBradley
            method.
          format: int32
          type: integer
        Depth1BppSauvolaFactor:
          default: 0.35
          description: Specifies the factor for a conversion using the Depth1BppSauvola
            method.
          format: float
          type: number
      required:
      - ConvertColorDepthMode
      - FileId
      - PageRange
      type: object
    ImageConvertColorDepthResponse:
      description: Represents the response to an image convert color depth action
        request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    CropUnit:
      description: Specifies the unit in which a crop box is expressed.
      enum:
      - Pixel
      - Percent
      type: string
    ImageCropParameters:
      description: Represents the parameters for an image crop action.
      example:
        CropBoxLeft: 0
        CropBoxHeight: 5
        CropBoxTop: 6
        FileId: FileId
        CropBoxWidth: 1
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            crop.
          type: string
        CropBoxLeft:
          description: Specifies the crop box left coordinate.
          format: int32
          type: integer
        CropBoxTop:
          description: Specifies the crop box top coordinate.
          format: int32
          type: integer
        CropBoxWidth:
          description: Specifies the crop box width.
          format: int32
          type: integer
        CropBoxHeight:
          description: Specifies the crop box height.
          format: int32
          type: integer
        CropUnit:
          $ref: '#/components/schemas/CropUnit'
      required:
      - CropBoxHeight
      - CropBoxLeft
      - CropBoxTop
      - CropBoxWidth
      - FileId
      - PageRange
      type: object
    ImageCropResponse:
      description: Represents the response to an image crop action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageDeletePageParameters:
      description: Represents the parameters for a delete page action.
      example:
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded image to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            be deleted.
          type: string
      required:
      - FileId
      - PageRange
      type: object
    ImageDeletePageResponse:
      description: Represents the response to a delete page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageDetectBlankPagesParameters:
      description: Represents the parameters for a detect blank pages action.
      example:
        FileId: FileId
        RemoveDetectedBlankPages: true
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of page to be
            processed.
          type: string
        RemoveDetectedBlankPages:
          default: true
          description: Specifies whether the detected blank page(s) shall be removed.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    ImageDetectBlankPagesResponse:
      description: Represents the response to a detect blank pages action request.
      example:
        DetectedBlankPages:
        - 6
        - 6
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        DetectedBlankPages:
          description: Specifies the number of the pages which have been detected
            to be blank.
          items:
            format: int32
            type: integer
          nullable: true
          readOnly: true
          type: array
      type: object
    ImageDetectColorParameters:
      description: Represents the parameters for an image color detection action.
      example:
        AutoConvert: false
        AutoRepairCharacters: false
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            perform color detection on.
          type: string
        AutoConvert:
          default: false
          description: Specifies whether to automatically convert the image in its
            best suited/optimized bits-per-pixel encoding.
          type: boolean
        AutoRepairCharacters:
          default: false
          description: Specifies whether the characters shall be repaired during bitonal
            conversion, if any, or not.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    OutputIntent:
      description: Defines the intent (color detection) of the image.
      enum:
      - Unknown
      - BlackWhite
      - Grayscale
      - Palletized
      - Color
      - White
      type: string
    ColorDetectionResult:
      description: Represents the result to a color detection operation performed
        on a given page of an image.
      example:
        PageNumber: 6
      properties:
        PageNumber:
          description: Specifies the number of the analyzed page.
          format: int32
          type: integer
        OutputIntent:
          $ref: '#/components/schemas/OutputIntent'
      type: object
    ImageDetectColorResponse:
      description: Represents the response to an image color detection action request.
      example:
        ColorDetectionResults:
        - PageNumber: 6
        - PageNumber: 6
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        ColorDetectionResults:
          description: Specifies the result of the color detection operation performed
            on each page.
          items:
            $ref: '#/components/schemas/ColorDetectionResult'
          nullable: true
          readOnly: true
          type: array
      type: object
    ImageDetectPageOrientationParameters:
      description: Represents the parameters for a detect page orientation action.
      example:
        Language: eng
        AutomaticallyApplyRotation: true
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            be processed.
          type: string
        Language:
          default: eng
          description: Specifies the language(s) to be used for the OCR.
          nullable: true
          type: string
        AutomaticallyApplyRotation:
          default: true
          description: Specifies whether a rotation shall be automatically applied
            in order to correct the page orientation when needed.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PageOrientationInfo:
      description: Represents information about the orientation of a given page.
      example:
        RotationAngle: 1
        PageNumber: 6
      properties:
        PageNumber:
          description: Specifies the number of the page.
          format: int32
          type: integer
        RotationAngle:
          description: Specifies, clockwise in degrees, the rotation angle of the
            page.
          format: int32
          type: integer
      type: object
    ImageDetectPageOrientationResponse:
      description: Represents the response to a detect page orientation action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        PageOrientations:
        - RotationAngle: 1
          PageNumber: 6
        - RotationAngle: 1
          PageNumber: 6
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageOrientations:
          description: Holds information about the detected page orientations.
          items:
            $ref: '#/components/schemas/PageOrientationInfo'
          nullable: true
          readOnly: true
          type: array
      type: object
    ImageFilters:
      description: Specifies a list of available image filters and effects.
      enum:
      - addNoise
      - aqua
      - blur
      - diffuse
      - fire
      - grayscale
      - sepia
      - negative
      - pixelize
      - relief
      - scanLine
      - sharpen
      - smooth
      - edgeEnhancement
      - contour
      - emboss
      - engrave
      - dilate
      - erode
      - connectedContour
      - soften
      - colorize
      - gaussian
      - max
      - min
      - median
      - subtractBackground
      - unsharpmask
      type: string
    ImageFilterParameters:
      description: Represents the parameters for an image filtering action.
      example:
        SoftenValue: 1
        UnsharpMaskAmount: 7.061401241503109
        ColorizeLuminosity: 6.846853
        MinKernelSize: 4
        RoiWidth: 1
        RoiLeft: 0
        UnsharpMaskRadius: 2
        MedianKernelSize: 2
        RoiHeight: 5
        ColorizeHue: 1.0246457
        PageRange: PageRange
        Filters:
        - null
        - null
        GaussianKernelSize: 5
        SubtractBackgroundRollingBallSize: 3
        RoiTop: 6
        UnsharpMaskThreshold: 9
        MaxKernelSize: 7
        ColorizeSaturation: 1.4894159
        FileId: FileId
        SubtractBackgroundLightBackground: true
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            apply the filter(s) to.
          type: string
        Filters:
          description: "Specifies an array of filters to be applied.\r\nA maximum\
            \ of 5 entries is supported."
          items:
            $ref: '#/components/schemas/ImageFilters'
          type: array
        RoiLeft:
          default: 0
          description: Specifies the left coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiTop:
          default: 0
          description: Specifies the top coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiWidth:
          default: 0
          description: Specifies the width, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        RoiHeight:
          default: 0
          description: Specifies the height, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        GaussianKernelSize:
          default: 3
          description: Specifies the kernel size for the Gaussian filter (if enabled).
            The size of the square kernel to use. Should be a odd value. For example,
            a size of 3 will involve 3 * 3 pixels in each pass. The larger the value
            the more blur you get. The range is larger or equal than 3, and less than
            the Image's Smaller Dimension (Width, Height) divided by 2. Suggested
            value is 3 for a [96-120] DPI image and 5 for a [200-250] dpi bitmap.
          format: int32
          type: integer
        UnsharpMaskRadius:
          default: 5
          description: Size of Edges to become after the unsharp mask effect is applied.
            It controls how wide they get after the filter is applied. Radius and
            Amount interact, reducing one, allows more of the other. Minimum Value
            of Radius should be 3 or more to allow for enough pixels surrounding the
            edge to be investigated. If value passed less than 3 is passed it will
            be ammended automatically to 3. Proper value is 5. Value >= 3.
          format: int32
          type: integer
        UnsharpMaskAmount:
          default: 0.5
          description: Amount of Contrast to be added to areas of edges where filter
            will be applies. It controls how much darker and how much brighter the
            edges become. Proper value is 0.5, Value between 0.0-5.0.
          format: double
          type: number
        UnsharpMaskThreshold:
          default: 40
          description: Specifies the amount of edges to be sharpened. Smaller values
            sharpen more, higher values exclude the subtle edges from being sharpened.
            Proper value is 40. Value between 0-255.
          format: int32
          type: integer
        SubtractBackgroundRollingBallSize:
          default: 50
          description: Size of ball rolled under the image. Controlled the amount
            of subtraction. Value >= 50.
          format: int32
          type: integer
        SubtractBackgroundLightBackground:
          default: true
          description: Whether a background is lighter or not than the foreground.Value
            >= true.
          type: boolean
        MedianKernelSize:
          default: 4
          description: Specifies the kernel size for the median filter (if enabled).
            Level corresponding to number of pixels to include in the median operation,
            where Level = n, corresponds to (n*2+1)^2 pixels to be included. For Example,
            KernelSize = 1 includes 9 pixels in the median operation, KernelSize =
            2 includes 25 pixels in the median operation. Range from 1 to 60.
          format: int32
          type: integer
        MinKernelSize:
          default: 2
          description: Specifies the kernel size for the minimum filter (if enabled).
            How large should objects grow in each direction of the four directions,
            left, right, top, and bottom This value should be larger than 1 and smaller
            than Image's Smaller Dimension (Width or Height) divided by 2.
          format: int32
          type: integer
        MaxKernelSize:
          default: 2
          description: Specifies the kernel size for the maximum filter (if enabled).
            How much smaller should objects become in each direction of the four directions,
            left, right, top, and bottom. This value should be larger than 1 and smaller
            than Image's Smaller Dimension (Width or Height) divided by 2.
          format: int32
          type: integer
        SoftenValue:
          default: 0
          description: Specifies the value for the soften filter (if enabled). Factor
            between 1 and 100.
          format: int32
          type: integer
        ColorizeHue:
          default: 0
          description: Hue for the colorization effect (if enabled) [0..100].
          format: float
          type: number
        ColorizeSaturation:
          default: 0
          description: Saturation for the colorization effect (if enabled) [0..100].
          format: float
          type: number
        ColorizeLuminosity:
          default: 0
          description: Luminosity for the colorization effect  (if enabled) [0..100].
          format: float
          type: number
      required:
      - FileId
      - Filters
      - PageRange
      type: object
    ImageFilterResponse:
      description: Represents the response to an image filtering action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageGetPageThumbnailParameters:
      description: Represents the parameters for a get page thumbnail action.
      example:
        ThumbnailHeight: 6
        ThumbnailWidth: 0
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the range of pages to get a thumbnail
            from.
          type: string
        ThumbnailWidth:
          default: 140
          description: Specifies the width, in points, of the thumbnail(s).
          format: int32
          type: integer
        ThumbnailHeight:
          default: 220
          description: Specifies the height, in points, of the thumbnail(s).
          format: int32
          type: integer
      required:
      - FileId
      - PageRange
      type: object
    PageImage:
      description: Holds the data of an image from a given page of a document.
      example:
        PageNumber: 6
        ImageData: ImageData
        FileName: FileName
      properties:
        PageNumber:
          description: Specifies the number of the page.
          format: int32
          type: integer
        ImageData:
          description: The data of the image.
          format: byte
          nullable: true
          type: string
        FileName:
          description: Specifies the name of the file.
          nullable: true
          type: string
      type: object
    ImageGetPageThumbnailResponse:
      description: Represents the response to a get page thumbnail action request.
      example:
        PageThumbnails:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageThumbnails:
          description: Contains all the obtained thumbnails.
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    ContentEncoding:
      description: Indicates the encoding mode of data.
      enum:
      - Identity
      - Gzip
      type: string
    LoadImageFromByteArrayParameters:
      description: Represents the parameters for an image loading request.
      example:
        Content: Content
        FileName: FileName
      properties:
        Content:
          description: Specifies the data of the image.
          format: byte
          type: string
        FileName:
          description: Specifies the name of the document.
          nullable: true
          type: string
        ContentEncoding:
          $ref: '#/components/schemas/ContentEncoding'
      required:
      - Content
      type: object
    ImageLoadResponse:
      description: Represents the response to an image loading action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        FileId: FileId
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        FileId:
          description: Specifies the file identifier of the loaded image document.
          nullable: true
          readOnly: true
          type: string
      type: object
    LoadImageParameters:
      description: Represents the parameters for importing an image.
      properties:
        FileName:
          description: Specifies the name of the document.
          nullable: true
          type: string
        ContentEncoding:
          $ref: '#/components/schemas/ContentEncoding'
      type: object
    MicrFont:
      description: Specifies the two major MICR fonts in use.
      enum:
      - CMC7
      - E13B
      type: string
    MicrContext:
      description: "Specifies the MICR context, i.e. the layout type of the data to\
        \ be recognized.\r\n."
      enum:
      - WholeDocument
      - LineFinding
      type: string
    ImageMICRParameters:
      description: Represents the parameters for a MICR action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the range of page to be processed.
          type: string
        Font:
          $ref: '#/components/schemas/MicrFont'
        Context:
          $ref: '#/components/schemas/MicrContext'
        WhiteList:
          default: ""
          description: Specifies the characters to be ignored by the recognition process.
          nullable: true
          type: string
        RoiLeft:
          default: 0
          description: Specifies the left coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiTop:
          default: 0
          description: Specifies the top coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiWidth:
          default: 0
          description: Specifies the width, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        RoiHeight:
          default: 0
          description: Specifies the height, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        ExpectedSymbolsCount:
          default: 0
          description: Specifies the number of symbols expected to be detected, use
            0 if unknown.
          format: int32
          type: integer
      required:
      - Context
      - FileId
      - Font
      - PageRange
      type: object
    MICRSymbolInfo:
      description: Holds detailed information about a magnetic ink symbol detected
        by a MICR process.
      example:
        Line: 7
        Confidence2: 3.6160767
        SymbolValue: SymbolValue
        Left: 5
        Top: 1
        Confidence: 9.301444
        Right: 2
        Bottom: 5
        SymbolValue2: SymbolValue2
      properties:
        SymbolValue:
          description: Specifies the best candidate for the character representation
            of the detected symbol.
          nullable: true
          type: string
        SymbolValue2:
          description: Specifies the second best candidate for the character representation
            of the detected symbol.
          nullable: true
          type: string
        Top:
          description: Specifies the top coordinate of the symbol, in pixels.
          format: int32
          type: integer
        Left:
          description: Specifies the left coordinate of the symbol, in pixels.
          format: int32
          type: integer
        Bottom:
          description: Specifies the bottom coordinate of the symbol, in pixels.
          format: int32
          type: integer
        Right:
          description: Specifies the right coordinate of the symbol, in pixels.
          format: int32
          type: integer
        Line:
          description: Specifies the number of the line on which the symbol has been
            detected.
          format: int32
          type: integer
        Confidence:
          description: Specifies the level of confidence of the best detected symbol
            candidate.
          format: float
          type: number
        Confidence2:
          description: Specifies the level of confidence of the second best detected
            symbol candidate.
          format: float
          type: number
      type: object
    MICRResult:
      description: Represents the result of a MICR operation run on a document given
        page.
      example:
        DetectedSymbols:
        - Line: 7
          Confidence2: 3.6160767
          SymbolValue: SymbolValue
          Left: 5
          Top: 1
          Confidence: 9.301444
          Right: 2
          Bottom: 5
          SymbolValue2: SymbolValue2
        - Line: 7
          Confidence2: 3.6160767
          SymbolValue: SymbolValue
          Left: 5
          Top: 1
          Confidence: 9.301444
          Right: 2
          Bottom: 5
          SymbolValue2: SymbolValue2
        PageNumber: 6
        Data: Data
      properties:
        PageNumber:
          description: Specifies the number of the page on which the symbols have
            been detected.
          format: int32
          type: integer
        Data:
          description: The detected data.
          nullable: true
          type: string
        DetectedSymbols:
          description: Holds detailed information about every single symbol which
            has been detected.
          items:
            $ref: '#/components/schemas/MICRSymbolInfo'
          nullable: true
          type: array
      type: object
    ImageMICRResponse:
      description: Represents the response to a MICR action request.
      example:
        Results:
        - DetectedSymbols:
          - Line: 7
            Confidence2: 3.6160767
            SymbolValue: SymbolValue
            Left: 5
            Top: 1
            Confidence: 9.301444
            Right: 2
            Bottom: 5
            SymbolValue2: SymbolValue2
          - Line: 7
            Confidence2: 3.6160767
            SymbolValue: SymbolValue
            Left: 5
            Top: 1
            Confidence: 9.301444
            Right: 2
            Bottom: 5
            SymbolValue2: SymbolValue2
          PageNumber: 6
          Data: Data
        - DetectedSymbols:
          - Line: 7
            Confidence2: 3.6160767
            SymbolValue: SymbolValue
            Left: 5
            Top: 1
            Confidence: 9.301444
            Right: 2
            Bottom: 5
            SymbolValue2: SymbolValue2
          - Line: 7
            Confidence2: 3.6160767
            SymbolValue: SymbolValue
            Left: 5
            Top: 1
            Confidence: 9.301444
            Right: 2
            Bottom: 5
            SymbolValue2: SymbolValue2
          PageNumber: 6
          Data: Data
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        Results:
          description: Holds the results of the MICR operations.
          items:
            $ref: '#/components/schemas/MICRResult'
          nullable: true
          readOnly: true
          type: array
      type: object
    ScanMode:
      description: Defines the different available scan modes.
      enum:
      - FavorSpeed
      - FavorAccuracy
      type: string
    ImageReadBarcodesParameters:
      description: Represents the parameters for a read barcode action.
      example:
        ScanBarcodeDataMatrix: true
        ScanBarcodeAztec: true
        RoiWidth: 1
        RoiLeft: 0
        RoiHeight: 5
        ScanBarcode1D: true
        ScanBarcodeMicroQR: true
        PageRange: PageRange
        ScanBarcodePDF417: true
        RoiTop: 6
        ScanBarcodeQR: true
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            read the barcodes from.
          type: string
        RoiLeft:
          default: 0
          description: Specifies the left coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiTop:
          default: 0
          description: Specifies the top coordinate, in pixel, of the region to process.
          format: int32
          type: integer
        RoiWidth:
          default: 0
          description: Specifies the width, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        RoiHeight:
          default: 0
          description: Specifies the height, in pixel, of the region to process. 0
            causes the entire image to be processed.
          format: int32
          type: integer
        ScanMode:
          $ref: '#/components/schemas/ScanMode'
        ScanBarcode1D:
          default: true
          description: Specifies whether the barcodes of type 1D shall be read.
          type: boolean
        ScanBarcodeQR:
          default: true
          description: Specifies whether the barcodes of type QR shall be read.
          type: boolean
        ScanBarcodeMicroQR:
          default: true
          description: Specifies whether the barcodes of type Micro QR shall be read.
          type: boolean
        ScanBarcodePDF417:
          default: true
          description: Specifies whether the barcodes of type PDF 147 shall be read.
          type: boolean
        ScanBarcodeDataMatrix:
          default: true
          description: Specifies whether the barcodes of type Data Matrix shall be
            read.
          type: boolean
        ScanBarcodeAztec:
          default: true
          description: Specifies whether the barcodes of type Aztec shall be read.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    BarcodeType:
      description: Defines the different type of barcodes which can be read.
      enum:
      - Linear
      - DataMatrix
      - QR
      - MicroQR
      - PDF417
      - Aztec
      type: string
    Barcode1DSymbology:
      description: Defines the different supported linear barcode symbologies.
      enum:
      - None
      - Industrial2of5
      - Inverted2of5
      - Interleaved2of5
      - Iata2of5
      - Matrix2of5
      - Code39
      - Codeabar
      - BcdMatrix
      - DataLogic2of5
      - Code128
      - CODE93
      - EAN13
      - UPCA
      - EAN8
      - UPCE
      - ADD5
      - ADD2
      type: string
    BarcodeInfo:
      description: Represents information about a read barcode.
      example:
        Data: Data
        BboxHeightInches: 1.2315135
        PageVerticalResolution: 1.1730742
        BboxWidthInches: 7.386282
        PageNumber: 1
        PagePixelHeight: 6
        Y1: 2
        X1: 6
        Y2: 7
        PagePixelWidth: 1
        PageHorizontalResolution: 7.4577446
        X2: 1
        Y3: 9
        BboxTopInches: 4.145608
        X3: 5
        Y4: 3
        X4: 5
        BboxLeftInches: 2.027123
      properties:
        Type:
          $ref: '#/components/schemas/BarcodeType'
        Barcode1DSymbology:
          $ref: '#/components/schemas/Barcode1DSymbology'
        Data:
          description: Specifies the data contained within the barcode.
          nullable: true
          readOnly: true
          type: string
        X1:
          description: Specifies the horizontal top-left position of the barcode,
            in pixels.
          format: int32
          readOnly: true
          type: integer
        X2:
          description: Specifies the horizontal top-right position of the barcode,
            in pixels.
          format: int32
          readOnly: true
          type: integer
        X3:
          description: Specifies the horizontal bottom-left position of the barcode,
            in pixels.
          format: int32
          readOnly: true
          type: integer
        X4:
          description: Specifies the horizontal bottom-right position of the barcode,
            in pixels.
          format: int32
          readOnly: true
          type: integer
        Y1:
          description: Specifies the vertical top-left position of the barcode, in
            pixels.
          format: int32
          readOnly: true
          type: integer
        Y2:
          description: Specifies the vertical top-right position of the barcode, in
            pixels.
          format: int32
          readOnly: true
          type: integer
        Y3:
          description: Specifies the vertical bottom-left position of the barcode,
            in pixels.
          format: int32
          readOnly: true
          type: integer
        Y4:
          description: Specifies the vertical bottom-right position of the barcode,
            in pixels.
          format: int32
          readOnly: true
          type: integer
        BboxLeftInches:
          description: Specifies the left coordinates of the bounding box of the barcode,
            in inches.
          format: float
          readOnly: true
          type: number
        BboxTopInches:
          description: Specifies the top coordinates of the bounding box of the barcode,
            in inches.
          format: float
          readOnly: true
          type: number
        BboxWidthInches:
          description: Specifies the width of the bounding box of the barcode, in
            inches.
          format: float
          readOnly: true
          type: number
        BboxHeightInches:
          description: Specifies the height of the bounding box of the barcode, in
            inches.
          format: float
          readOnly: true
          type: number
        PageNumber:
          description: Specifies the number of the page on which the barcode was read.
          format: int32
          readOnly: true
          type: integer
        PagePixelWidth:
          description: Specifies the width, in pixels, of the page where the barcode
            has been decoded.
          format: int32
          readOnly: true
          type: integer
        PagePixelHeight:
          description: Specifies the height, in pixels, of the page where the barcode
            has been decoded.
          format: int32
          readOnly: true
          type: integer
        PageHorizontalResolution:
          description: Specifies the horizontal resolution, in pixel per inches, of
            the page where the barcode has been decoded.
          format: float
          readOnly: true
          type: number
        PageVerticalResolution:
          description: Specifies the vertical resolution, in pixel per inches, of
            the page where the barcode has been decoded.
          format: float
          readOnly: true
          type: number
      type: object
    ReadBarcodesResponse:
      description: Represents the response to a read barcode page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        Barcodes:
        - Data: Data
          BboxHeightInches: 1.2315135
          PageVerticalResolution: 1.1730742
          BboxWidthInches: 7.386282
          PageNumber: 1
          PagePixelHeight: 6
          Y1: 2
          X1: 6
          Y2: 7
          PagePixelWidth: 1
          PageHorizontalResolution: 7.4577446
          X2: 1
          Y3: 9
          BboxTopInches: 4.145608
          X3: 5
          Y4: 3
          X4: 5
          BboxLeftInches: 2.027123
        - Data: Data
          BboxHeightInches: 1.2315135
          PageVerticalResolution: 1.1730742
          BboxWidthInches: 7.386282
          PageNumber: 1
          PagePixelHeight: 6
          Y1: 2
          X1: 6
          Y2: 7
          PagePixelWidth: 1
          PageHorizontalResolution: 7.4577446
          X2: 1
          Y3: 9
          BboxTopInches: 4.145608
          X3: 5
          Y4: 3
          X4: 5
          BboxLeftInches: 2.027123
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        Barcodes:
          description: Specifies the information of the different barcodes which have
            been read.
          items:
            $ref: '#/components/schemas/BarcodeInfo'
          nullable: true
          readOnly: true
          type: array
      type: object
    ResizeMode:
      description: The algorithm to be used during resizing.
      enum:
      - Auto
      - NearestNeighbor
      - Box
      - Lanczos3
      - Bilinear
      - Bicubic
      - Bspline
      - CatmullRomSpline
      type: string
    ResizeUnit:
      description: Specifies the unit of measure for the given data.
      enum:
      - Pixel
      - Percent
      type: string
    ImageResizeParameters:
      description: Represents the parameters for an image resize action.
      example:
        ResizeVertical: 6.0274563
        FileId: FileId
        ResizeHorizontal: 0.8008282
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            resize.
          type: string
        ResizeHorizontal:
          description: Specifies the resize horizontal parameter.
          format: float
          type: number
        ResizeVertical:
          description: Specifies the resize vertical parameter.
          format: float
          type: number
        ResizeMode:
          $ref: '#/components/schemas/ResizeMode'
        ResizeUnit:
          $ref: '#/components/schemas/ResizeUnit'
      required:
      - FileId
      - PageRange
      - ResizeHorizontal
      - ResizeVertical
      type: object
    ImageResizeResponse:
      description: Represents the response to an image resize action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageRotateParameters:
      description: Represents the parameters for an image rotate action.
      example:
        FlipHorizontally: false
        RotationAngle: 0.8008282
        FlipVertically: false
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            rotate.
          type: string
        RotationAngle:
          default: 0
          description: Specifies the rotation angle, clockwise in degrees, which can
            be either positive and negative and any multiple of 90.
          format: float
          type: number
        FlipHorizontally:
          default: false
          description: Specifies whether the page(s) shall be flipped horizontally.
          type: boolean
        FlipVertically:
          default: false
          description: Specifies whether the page(s) shall be flipped vertically.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    ImageRotateResponse:
      description: Represents the response to an image rotate action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    ImageSaveAsJPEGParameters:
      description: Represents the parameters for a save as JPEG action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as JPEG.
          nullable: true
          type: string
        Quality:
          default: 75
          description: Specifies the level of quality to be used for the JPEG compression,
            from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
        Progressive:
          default: false
          description: Specifies if the encoded JPEG image must be progressive.
          type: boolean
      required:
      - FileId
      type: object
    ImageSaveAsJPEGResponse:
      description: Represents the response to a save as JPEG action request.
      example:
        RemainingTokens: 0
        PageImages:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageImages:
          description: The image(s) saved as JPEG.
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfConformance:
      description: Specifies PDF versions and conformance levels of a PDF document.
      enum:
      - Unknown
      - PDF10
      - PDF11
      - PDF12
      - PDF13
      - PDF14
      - PDF15
      - PDF16
      - PDF17
      - PDF20
      - PDFA1a
      - PDFA1b
      - PDFA2a
      - PDFA2u
      - PDFA2b
      - PDFA3a
      - PDFA3u
      - PDFA3b
      - PDFUA1
      type: string
    PdfImageCompressionScheme:
      description: Specifies the standard scheme to be used to compress image data
        in PDF documents.
      enum:
      - None
      - Flate
      - CCIT4
      - JPEG
      - JBIG2
      - JPEG2000
      type: string
    ImageSaveAsPDFParameters:
      description: Represents the parameters for a save as PDF action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as PDF.
          nullable: true
          type: string
        Conformance:
          $ref: '#/components/schemas/PdfConformance'
        ColorImageCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
        BitonalImageCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
        EnableColorDetection:
          default: false
          description: Specifies is color detection must be used.
          type: boolean
        ImageQuality:
          default: 75
          description: "Specifies the quality to be used for the compression of the\
            \ images from the PDF.\r\nMust be in the range [0 (best compression -\
            \ worst quality) - 100 (worst quality - best compression)]."
          format: int32
          type: integer
        DownscaleResolution:
          default: 0
          description: Specifies the resolution for downscaling images, if any.
          format: int32
          type: integer
        FastWebView:
          default: false
          description: Specifies whether the PDF shall be optimized for online distribution.
          type: boolean
      required:
      - FileId
      type: object
    ImageSaveAsPDFResponse:
      description: Represents the response to a save as PDF action request.
      example:
        FileName: FileName
        RemainingTokens: 0
        PdfData: PdfData
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PdfData:
          description: Specifies the data of the produced PDF.
          format: byte
          nullable: true
          readOnly: true
          type: string
        FileName:
          description: Specifies the name of the saved document.
          nullable: true
          readOnly: true
          type: string
      type: object
    ImageSaveAsPDFMRCParameters:
      description: Represents the parameters for a save as PDF MRC action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as PDF MRC.
          nullable: true
          type: string
        Conformance:
          $ref: '#/components/schemas/PdfConformance'
        ColorImageCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
        BitonalImageCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
        ImageQuality:
          default: 60
          description: "Specifies the quality to be used for the compression of the\
            \ images from the PDF.\r\nMust be in the range [0 (best compression -\
            \ worst quality) - 100 (worst quality - best compression)]."
          format: int32
          type: integer
        DownscaleResolution:
          default: 100
          description: Specifies the resolution for downscaling the background layer,
            if any.
          format: int32
          type: integer
        PreserveSmoothing:
          default: false
          description: "Specifies whether the MRC engine should try to preserve smoothing\
            \ between different layers. \r\nEnabling this option should globally enhance\
            \ the text quality but also reduce the compression rate."
          type: boolean
        FastWebView:
          default: false
          description: Specifies whether the PDF shall be optimized for online distribution.
          type: boolean
        JBIG2PMSThreshold:
          default: 0.85
          description: Specifies the threshold value for the JBIG2 encoder pattern
            matching and substitution between 0 and 1. Any number lower than 1 may
            lead to lossy compression.
          format: float
          type: number
      required:
      - FileId
      type: object
    ImageSaveAsPDFMRCResponse:
      description: Represents the response to a save as PDF MRC action request.
      example:
        FileName: FileName
        RemainingTokens: 0
        PdfData: PdfData
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PdfData:
          description: Specifies the data of the produced PDF.
          format: byte
          nullable: true
          readOnly: true
          type: string
        FileName:
          description: Specifies the name of the saved document.
          nullable: true
          readOnly: true
          type: string
      type: object
    ImageSaveAsPNGParameters:
      description: Represents the parameters for a save as PNG action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as PNG.
          nullable: true
          type: string
        Compression:
          default: 6
          description: Specifies the level of compression to be used for the PNG output,
            between 0 (no compression - faster encoding) to 9(max compression - slower
            encoding).
          format: int32
          type: integer
        Interlaced:
          default: false
          description: Specifies if the produced PNG image must be interlaced.
          type: boolean
      required:
      - FileId
      type: object
    ImageSaveAsPNGResponse:
      description: Represents the response to a save as PNG action request.
      example:
        RemainingTokens: 0
        PageImages:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageImages:
          description: The image(s) saved as PNG.
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    TiffSaveCompression:
      description: Specifies the TIFF compression when saving images in TIFF format.
      enum:
      - Deflate
      - CCITT3
      - CCITT4
      - LZW
      - JPEG
      - RLE
      - Auto
      type: string
    ImageSaveAsTIFFParameters:
      description: Represents the parameters for a save as TIFF action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as TIFF.
          nullable: true
          type: string
        Compression:
          $ref: '#/components/schemas/TiffSaveCompression'
        JpegQuality:
          default: 75
          description: Specifies the level of quality to be used if JPEG compression
            is used, from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
        UseCMYK:
          default: false
          description: Specifies whether the TIFF shall be saved in CMYK color space
            or not.
          type: boolean
      required:
      - FileId
      type: object
    ImageSaveAsTIFFResponse:
      description: Represents the response to a save as TIFF action request.
      example:
        RemainingTokens: 0
        PageImages:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageImages:
          description: The image(s) saved as TIFF.
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    ImageSaveAsTIFFMultipageParameters:
      description: Represents the parameters for a save as TIFF multipage action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as TIFF.
          nullable: true
          type: string
        Compression:
          $ref: '#/components/schemas/TiffSaveCompression'
        JpegQuality:
          default: 75
          description: Specifies the level of quality to be used if JPEG compression
            is used, from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
      required:
      - FileId
      type: object
    ImageSaveAsTIFFMultipageResponse:
      description: Represents the response to a save as TIFF multipage action request.
      example:
        ImageData: ImageData
        FileName: FileName
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        ImageData:
          description: Specifies the data of the produced multipage TIFF.
          format: byte
          nullable: true
          readOnly: true
          type: string
        FileName:
          description: Specifies the name of the saved document.
          nullable: true
          readOnly: true
          type: string
      type: object
    ImageSwapPagesParameters:
      description: Represents the parameters for a swap pages action.
      example:
        Page1: 0
        Page2: 6
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        Page1:
          description: Specifies the number of the first page.
          format: int32
          type: integer
        Page2:
          description: Specifies the number of the second page.
          format: int32
          type: integer
      required:
      - FileId
      - Page1
      - Page2
      type: object
    ImageSwapPagesResponse:
      description: Represents the response to a swap pages action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PassportPDFPassport:
      example:
        IsActive: true
        PlanId: 0
        TokensPercentUsageAlert: 5
        PassportId: PassportId
        RemainingTokens: 5
        OptionalLinkedSubscriptionId: OptionalLinkedSubscriptionId
        ExtraTokensEndDate: 2000-01-23T04:56:07.000+00:00
        ExtraTokens: 1
        SubscriptionDate: 2000-01-23T04:56:07.000+00:00
        ExpirationDate: 2000-01-23T04:56:07.000+00:00
        TokensPercentUsageAlertSent: true
        CurrentTokensUsed: 6
        NextMonthlyTerm: 2000-01-23T04:56:07.000+00:00
        IsYearlyPaid: true
      properties:
        PassportId:
          nullable: true
          type: string
        PlanId:
          format: int32
          type: integer
        OptionalLinkedSubscriptionId:
          nullable: true
          type: string
        SubscriptionDate:
          format: date-time
          type: string
        ExpirationDate:
          format: date-time
          type: string
        CurrentTokensUsed:
          format: int64
          type: integer
        ExtraTokens:
          format: int64
          type: integer
        ExtraTokensEndDate:
          format: date-time
          type: string
        IsYearlyPaid:
          type: boolean
        IsActive:
          type: boolean
        TokensPercentUsageAlert:
          format: int32
          type: integer
        TokensPercentUsageAlertSent:
          type: boolean
        NextMonthlyTerm:
          format: date-time
          readOnly: true
          type: string
        RemainingTokens:
          format: int64
          readOnly: true
          type: integer
      type: object
    AnnotationType:
      description: Defines the different available types of annotations.
      enum:
      - StickyNote
      - Link
      - FreeText
      - Line
      - Square
      - Circle
      - RubberStamp
      type: string
    ContentHorizontalPosition:
      description: Defines the different horizontal positions for content added on
        a page.
      enum:
      - Center
      - Left
      - Right
      - Absolute
      type: string
    ContentVerticalPosition:
      description: Defines the different possible vertical positions for content added
        on a page.
      enum:
      - Center
      - Top
      - Bottom
      - Absolute
      type: string
    ContentSize:
      description: Defines the different possible sizes for content added on a page.
      enum:
      - Small
      - Medium
      - Large
      - Absolute
      - AutoFit
      type: string
    DrawableContentLayoutParameters:
      description: Represents information about the layout of a content, on the page
        it is drawn onto.
      example:
        AbsolutePositionTop: 6.0274563
        AbsoluteHeight: 5.962134
        AbsolutePositionLeft: 0.8008282
        AbsoluteWidth: 1.4658129
        IndentFromEdges: true
      properties:
        HorizontalPosition:
          $ref: '#/components/schemas/ContentHorizontalPosition'
        VerticalPosition:
          $ref: '#/components/schemas/ContentVerticalPosition'
        Size:
          $ref: '#/components/schemas/ContentSize'
        IndentFromEdges:
          default: true
          description: Specifies whether the content shall be slightly indented from
            the nearest page edges.
          type: boolean
        AbsolutePositionLeft:
          description: Specifies the absolute horizontal position of the top-left
            edge of the content, in points.
          format: float
          type: number
        AbsolutePositionTop:
          description: Specifies the absolute vertical position of the top-left edge
            of the content, in points.
          format: float
          type: number
        AbsoluteWidth:
          description: Specifies the absolute width of the content, in points.
          format: float
          type: number
        AbsoluteHeight:
          description: Specifies the absolute height of the content, in points.
          format: float
          type: number
      type: object
    StickyNoteAnnotationIcon:
      description: Defines the different available icons for a sticky note annotation.
      enum:
      - Comment
      - Key
      - Note
      - Help
      - NewParagraph
      - Paragraph
      - Insert
      - Check
      - Circle
      - Cross
      - CrossHairs
      - RightArrow
      - RightPointer
      - Star
      - UpArrow
      - UpLeftArrow
      type: string
    StickyNoteAnnotationParameters:
      description: Represents information about the Sticky Note Annotation.
      example:
        AnnotationLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        OpenPopup: true
        Content: Content
        Color: red
        Author: Author
        Subject: Subject
      properties:
        AnnotationLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
        StickyNoteIcon:
          $ref: '#/components/schemas/StickyNoteAnnotationIcon'
        Author:
          description: Specify the author of the annotation, if any.
          nullable: true
          type: string
        Subject:
          description: Specify the subject of the annotation, if any.
          nullable: true
          type: string
        Content:
          description: Specify the content of the annotation, if any.
          nullable: true
          type: string
        OpenPopup:
          description: Specifies if the popup of annotation shall be opened by default.
          type: boolean
        Color:
          default: red
          description: 'Specifies the color of the annotation, using the color name
            (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
      required:
      - AnnotationLayout
      type: object
    LinkAnnotationType:
      description: Defines the supported types of Link Annotation.
      enum:
      - Page
      - Web
      type: string
    LinkAnnotationParameters:
      description: Represents information about the Link Annotation.
      example:
        LinkUri: LinkUri
        AnnotationLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        Color: red
        LinkPage: 5
        ShowBorder: true
      properties:
        AnnotationLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
        LinkType:
          $ref: '#/components/schemas/LinkAnnotationType'
        LinkPage:
          description: Specifies the link annotation destination page if the Page
            type is specified.
          format: int32
          type: integer
        LinkUri:
          description: Specifies the link annotation destination URI if the Web type
            is specified.
          nullable: true
          type: string
        ShowBorder:
          description: Specifies if the annotation border shall be drawn.
          type: boolean
        Color:
          default: red
          description: 'Specifies the color of the annotation, using the color name
            (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
      required:
      - AnnotationLayout
      type: object
    StandardFontName:
      description: Defines the different available standard fonts (Standard Type 1)
        which can be used without prior definition.
      enum:
      - Courier
      - Helvetica
      - Times
      - Symbol
      - ZapfDingbats
      type: string
    PdfTextParameters:
      description: Represents the basic parameters for text content.
      example:
        FontSize: 2
        FontName: FontName
        Text: Text
        TextColor: black
      properties:
        Text:
          description: Specifies the text.
          nullable: true
          type: string
        TextColor:
          default: black
          description: 'Specifies the color of the text, using the color name (ie:
            "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
        FontName:
          description: Specifies the name of the font to be used.
          nullable: true
          type: string
        StandardFontName:
          $ref: '#/components/schemas/StandardFontName'
        FontStyle:
          $ref: '#/components/schemas/FontStyle'
        FontSize:
          default: 11
          description: Specifies the size of the font.
          format: int32
          type: integer
      type: object
    FreeTextAnnotationParameters:
      description: Represents information about the FreeText Annotation.
      example:
        TextParameters:
          FontSize: 2
          FontName: FontName
          Text: Text
          TextColor: black
        AnnotationLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        Color: red
        Title: Title
        Subject: Subject
        ShowBorder: true
      properties:
        AnnotationLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
        TextParameters:
          $ref: '#/components/schemas/PdfTextParameters'
        Title:
          description: Specifies the title of the annotation, if any.
          nullable: true
          type: string
        Subject:
          description: Specify the subject of the annotation, if any.
          nullable: true
          type: string
        ShowBorder:
          description: Specifies if the annotation border shall be drawn.
          type: boolean
        Color:
          default: red
          description: 'Specifies the color of the annotation, using the color name
            (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
      required:
      - AnnotationLayout
      type: object
    LineAnnotationEndingStyle:
      description: Specifies an line annotation's ending style.
      enum:
      - Square
      - Circle
      - Diamond
      - OpenArrow
      - ClosedArrow
      - None
      - Butt
      - ReversedOpenArrow
      - ReversedClosedArrow
      - Slash
      type: string
    LineAnnotationParameters:
      description: Represents information about the Line Annotation.
      example:
        LineStartX: 7.0614014
        LineStartY: 9.301444
        Content: Content
        Color: red
        Title: Title
        LineEndX: 3.6160767
        AbsoluteAnnotationLineWidth: 4.145608
        LineEndY: 2.027123
        ShowContent: true
      properties:
        LineStartX:
          description: Specifies if the horizontal coordinate of line annotation start
            point.
          format: float
          type: number
        LineStartY:
          description: Specifies if the vertical coordinate of line annotation start
            point.
          format: float
          type: number
        LineEndX:
          description: Specifies if the horizontal coordinate of line annotation end
            point.
          format: float
          type: number
        LineEndY:
          description: Specifies if the vertical coordinate of line annotation end
            point.
          format: float
          type: number
        Title:
          description: Specifies the title of the annotation, if any.
          nullable: true
          type: string
        Content:
          description: Specify the content of the annotation, if any.
          nullable: true
          type: string
        LineStartStyle:
          $ref: '#/components/schemas/LineAnnotationEndingStyle'
        LineEndStyle:
          $ref: '#/components/schemas/LineAnnotationEndingStyle'
        ShowContent:
          description: Specifies if the popup of annotation shall be opened by default.
          type: boolean
        LineWidth:
          $ref: '#/components/schemas/ContentSize'
        AbsoluteAnnotationLineWidth:
          description: Specifies the absolute line width of the annotation, in points.
          format: float
          type: number
        Color:
          default: red
          description: 'Specifies the color of the annotation, using the color name
            (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
      type: object
    SquareAndCircleAnnotationParameters:
      description: Represents information about the Square / Circle Annotation.
      example:
        AnnotationLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        Content: Content
        Color: red
        Title: Title
        AbsoluteAnnotationLineWidth: 7.386282
      properties:
        AnnotationLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
        Title:
          description: Specifies the title of the annotation, if any.
          nullable: true
          type: string
        Content:
          description: Specify the content of the annotation, if any.
          nullable: true
          type: string
        LineWidth:
          $ref: '#/components/schemas/ContentSize'
        AbsoluteAnnotationLineWidth:
          description: Specifies the absolute thickness of the annotation, in points.
          format: float
          type: number
        Color:
          default: red
          description: 'Specifies the color of the annotation, using the color name
            (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
      required:
      - AnnotationLayout
      type: object
    RubberStampAnnotationIcon:
      description: Defines the different available icons for a rubber stamp annotation.
      enum:
      - Approved
      - NotApproved
      - NotForPublicRelease
      - Confidential
      - Final
      - ForComment
      - Draft
      - ForPublicRelease
      - SBCompleted
      - SBInformationOnly
      - SBVoid
      - SBPreliminaryResults
      - SBRejected
      - SHAccepted
      - SHInitialHere
      - SHSignHere
      - SHWitness
      - DApproved
      - DConfidential
      - DReceived
      - DReviewed
      type: string
    RubberStampAnnotationParameters:
      description: Represents information about the Rubber Stamp Annotation.
      example:
        AnnotationLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        Content: Content
        Color: red
        Title: Title
      properties:
        AnnotationLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
        RubberStampIcon:
          $ref: '#/components/schemas/RubberStampAnnotationIcon'
        Title:
          description: Specifies the title of the annotation, if any.
          nullable: true
          type: string
        Content:
          description: Specify the content of the annotation, if any.
          nullable: true
          type: string
        Color:
          default: red
          description: 'Specifies the color of the annotation, using the color name
            (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
      required:
      - AnnotationLayout
      type: object
    PdfAnnotateParameters:
      description: Represents the parameters for an annotate action.
      example:
        FreeTextAnnotationParameters:
          TextParameters:
            FontSize: 2
            FontName: FontName
            Text: Text
            TextColor: black
          AnnotationLayout:
            AbsolutePositionTop: 6.0274563
            AbsoluteHeight: 5.962134
            AbsolutePositionLeft: 0.8008282
            AbsoluteWidth: 1.4658129
            IndentFromEdges: true
          Color: red
          Title: Title
          Subject: Subject
          ShowBorder: true
        RubberStampAnnotationParameters:
          AnnotationLayout:
            AbsolutePositionTop: 6.0274563
            AbsoluteHeight: 5.962134
            AbsolutePositionLeft: 0.8008282
            AbsoluteWidth: 1.4658129
            IndentFromEdges: true
          Content: Content
          Color: red
          Title: Title
        LineAnnotationParameters:
          LineStartX: 7.0614014
          LineStartY: 9.301444
          Content: Content
          Color: red
          Title: Title
          LineEndX: 3.6160767
          AbsoluteAnnotationLineWidth: 4.145608
          LineEndY: 2.027123
          ShowContent: true
        SquareAndCircleAnnotationParameters:
          AnnotationLayout:
            AbsolutePositionTop: 6.0274563
            AbsoluteHeight: 5.962134
            AbsolutePositionLeft: 0.8008282
            AbsoluteWidth: 1.4658129
            IndentFromEdges: true
          Content: Content
          Color: red
          Title: Title
          AbsoluteAnnotationLineWidth: 7.386282
        LinkAnnotationParameters:
          LinkUri: LinkUri
          AnnotationLayout:
            AbsolutePositionTop: 6.0274563
            AbsoluteHeight: 5.962134
            AbsolutePositionLeft: 0.8008282
            AbsoluteWidth: 1.4658129
            IndentFromEdges: true
          Color: red
          LinkPage: 5
          ShowBorder: true
        StickyNoteAnnotationParameters:
          AnnotationLayout:
            AbsolutePositionTop: 6.0274563
            AbsoluteHeight: 5.962134
            AbsolutePositionLeft: 0.8008282
            AbsoluteWidth: 1.4658129
            IndentFromEdges: true
          OpenPopup: true
          Content: Content
          Color: red
          Author: Author
          Subject: Subject
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the range of page to be annotated.
          type: string
        AnnotationType:
          $ref: '#/components/schemas/AnnotationType'
        StickyNoteAnnotationParameters:
          $ref: '#/components/schemas/StickyNoteAnnotationParameters'
        LinkAnnotationParameters:
          $ref: '#/components/schemas/LinkAnnotationParameters'
        FreeTextAnnotationParameters:
          $ref: '#/components/schemas/FreeTextAnnotationParameters'
        LineAnnotationParameters:
          $ref: '#/components/schemas/LineAnnotationParameters'
        SquareAndCircleAnnotationParameters:
          $ref: '#/components/schemas/SquareAndCircleAnnotationParameters'
        RubberStampAnnotationParameters:
          $ref: '#/components/schemas/RubberStampAnnotationParameters'
      required:
      - FileId
      - PageRange
      type: object
    PdfAnnotateResponse:
      description: Represents the response to an annotate action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfAutoDeskewParameters:
      description: Represents the parameters for an auto deskew action.
      example:
        Optimistic: false
        MaxAngleOfResearch: 0.8008282
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the page range to be auto-deskewed.
          type: string
        MaxAngleOfResearch:
          default: 15
          description: Specifies the maximum skew angle to be detected. A value of
            below 15 is suggested.
          format: float
          type: number
        Optimistic:
          default: false
          description: "Specifies whether the skew detection engine must be optimistic\
            \ when detecting angles.\r\nIf you know the image is skewed, you should\
            \ set this to true."
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PdfAutoDeskewResponse:
      description: Represents the response to an auto deskew action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfClearPageParameters:
      description: Represents the parameters for a clear page action.
      example:
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the range of pages to be cleared.
          type: string
      required:
      - FileId
      - PageRange
      type: object
    PdfClearPageResponse:
      description: Represents the response to a clear page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfClonePageParameters:
      description: Represents the parameters for a ClonePage action.
      example:
        SourceFileId: SourceFileId
        FileId: FileId
        PageRange: PageRange
        DestinationPage: 0
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        SourceFileId:
          description: Specifies the file identifier of the PDF to be cloned.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            be cloned.
          type: string
        DestinationPage:
          description: Specifies the number of the page where the cloned page(s) shall
            be inserted.
          format: int32
          type: integer
      required:
      - DestinationPage
      - FileId
      - PageRange
      - SourceFileId
      type: object
    PdfClonePageResponse:
      description: Represents the response to a ClonePage action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfCloseDocumentParameters:
      description: Represents the parameters for a close document action.
      example:
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
      required:
      - FileId
      type: object
    PdfCloseDocumentResponse:
      description: Represents the response to a close document action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfAConformance:
      description: Specifies the different available PDF/A conformance levels.
      enum:
      - PDFA1a
      - PDFA1b
      - PDFA2a
      - PDFA2b
      - PDFA2u
      - PDFA3a
      - PDFA3b
      - PDFA3u
      type: string
    PdfConvertToPDFAParameters:
      description: Represents the parameters for a convert to PDF/A action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        Conformance:
          $ref: '#/components/schemas/PdfAConformance'
        AllowVectorization:
          default: true
          description: If set to true, conversion engine will use the page vectorization
            in case direct conversion is not possible.
          type: boolean
        AllowRasterization:
          default: true
          description: If set to true, conversion engine will use the page rasterization
            in case direct conversion and verorization are not possible or allowed.
          type: boolean
      required:
      - FileId
      type: object
    PdfConvertToPDFAResponse:
      description: Represents the response to a convert to PDF/A action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfDeletePageParameters:
      description: Represents the parameters for a delete page action.
      example:
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            be deleted.
          type: string
      required:
      - FileId
      - PageRange
      type: object
    PdfDeletePageResponse:
      description: Represents the response to a delete page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfDetectPageOrientationParameters:
      description: Represents the parameters for a detect page orientation action.
      example:
        Language: eng
        AutomaticallyApplyRotation: true
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            be processed.
          type: string
        Language:
          default: eng
          description: Specifies the language to be used for the detection.
          nullable: true
          type: string
        AutomaticallyApplyRotation:
          default: true
          description: Specifies whether a rotation shall be automatically applied
            in order to correct the page orientation when needed.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PdfDetectPageOrientationResponse:
      description: Represents the response to a detect page orientation action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        PageOrientations:
        - RotationAngle: 1
          PageNumber: 6
        - RotationAngle: 1
          PageNumber: 6
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageOrientations:
          description: Holds information about the detected page orientations.
          items:
            $ref: '#/components/schemas/PageOrientationInfo'
          nullable: true
          readOnly: true
          type: array
      type: object
    SignatureMode:
      description: Specifies the security handler of a signature.
      enum:
      - AdobePPKMS
      - AdobePPKLite
      - AdobeCADES
      type: string
    SignatureCertificationLevel:
      description: Specifies the level of the signature certification.
      enum:
      - NotCertified
      - NoChanges
      - FormFilling
      - FormFillingAndAnnotations
      type: string
    SignatureHash:
      description: Specifies the SHA (hash) algorithm to use while signing.
      enum:
      - SHA1
      - SHA256
      - SHA512
      - SHA224
      - SHA384
      type: string
    TextAlignment:
      description: Defines the different available text alignments.
      enum:
      - Near
      - Center
      - Far
      type: string
    PdfAlignedTextParameters:
      description: Represents the parameters for aligned text content.
      example:
        FontSize: 6
        FontName: FontName
        Text: Text
        TextColor: black
      properties:
        TextVerticalAlignment:
          $ref: '#/components/schemas/TextAlignment'
        TextHorizontalAlignment:
          $ref: '#/components/schemas/TextAlignment'
        Text:
          description: Specifies the text.
          nullable: true
          type: string
        TextColor:
          default: black
          description: 'Specifies the color of the text, using the color name (ie:
            "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
        FontName:
          description: Specifies the name of the font to be used.
          nullable: true
          type: string
        StandardFontName:
          $ref: '#/components/schemas/StandardFontName'
        FontStyle:
          $ref: '#/components/schemas/FontStyle'
        FontSize:
          default: 11
          description: Specifies the size of the font.
          format: int32
          type: integer
      type: object
    PdfDigiSignParameters:
      description: Represents the parameters for a digital signature action.
      example:
        ShowValidationMark: false
        TimeStampUserName: TimeStampUserName
        TimeStampPassword: TimeStampPassword
        Reason: Reason
        Linearize: false
        DrawSignature: false
        CertificatePassword: CertificatePassword
        TimeStampURL: TimeStampURL
        PageNumber: 0
        ImageData: ImageData
        CertificateData: CertificateData
        SignerName: PassportPDF
        FileId: FileId
        ContactInfo: ContactInfo
        SignatureLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        SignatureText:
          FontSize: 6
          FontName: FontName
          Text: Text
          TextColor: black
        Location: Location
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        CertificateData:
          description: Specifies the data of the digital PKCS#12 certificate file.
          format: byte
          type: string
        CertificatePassword:
          description: Specifies the certificate password.
          type: string
        SignatureMode:
          $ref: '#/components/schemas/SignatureMode'
        SignatureCertificationLevel:
          $ref: '#/components/schemas/SignatureCertificationLevel'
        SignatureHashAlgorithm:
          $ref: '#/components/schemas/SignatureHash'
        SignerName:
          default: PassportPDF
          description: Specifies the name of the signer.
          nullable: true
          type: string
        Reason:
          default: ""
          description: Specifies the reason of the signature.
          nullable: true
          type: string
        Location:
          default: ""
          description: Specifies the location where the signature is applied.
          nullable: true
          type: string
        ContactInfo:
          default: ""
          description: Specifies contact information about the signer.
          nullable: true
          type: string
        TimeStampURL:
          default: ""
          description: Specifies the URL of the server responsible of providing a
            time stamp.
          nullable: true
          type: string
        TimeStampUserName:
          default: ""
          description: Specifies the optional user name associated with the time stamp
            server.
          nullable: true
          type: string
        TimeStampPassword:
          default: ""
          description: Specifies the optional password associated with the time stamp
            server.
          nullable: true
          type: string
        Linearize:
          default: false
          description: Specifies whether the signed PDF shall be linearized.
          type: boolean
        DrawSignature:
          default: false
          description: Specifies whether the signature shall be drawn on the document.
          type: boolean
        PageNumber:
          default: 1
          description: Specifies the number of the page on which the signature shall
            be drawn.
          format: int32
          type: integer
        ShowValidationMark:
          default: false
          description: Specifies whether a validation mark shall be drawn with the
            signature.
          type: boolean
        ImageData:
          description: Specifies the data of the image to be drawn at the signature
            location.
          format: byte
          nullable: true
          type: string
        SignatureLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
        SignatureText:
          $ref: '#/components/schemas/PdfAlignedTextParameters'
      required:
      - CertificateData
      - CertificatePassword
      - FileId
      type: object
    PdfDigiSignResponse:
      description: Represents the response to a digital signature action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfDrawImageParameters:
      description: Represents the parameters for a draw image action.
      example:
        ImageFileId: ImageFileId
        ImageData: ImageData
        Quality: 0
        FileId: FileId
        ImageLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the page range on which the image shall
            be drawn.
          type: string
        ImageData:
          description: Specifies the data of the image to be drawn.
          format: byte
          nullable: true
          type: string
        ImageFileId:
          default: ""
          description: Specifies the file ID of the image to be drawn.
          nullable: true
          type: string
        Quality:
          default: 75
          description: Specifies the level of quality to be used for the compression,
            from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
        ColorImageCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
        BitonalCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
        ImageLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
      required:
      - FileId
      - PageRange
      type: object
    PdfDrawImageResponse:
      description: Represents the response to a draw image action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfExtractPageParameters:
      description: Represents the parameters for an extract page action.
      example:
        ExtractAsSeparate: false
        FileId: FileId
        ImmediateDownload: false
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            be extracted.
          type: string
        ExtractAsSeparate:
          default: false
          description: Specifies whether each extracted page shall form a separate
            document.
          type: boolean
        ImmediateDownload:
          default: false
          description: Specifies whether the file(s) created as a result of the action
            shall be available for immediate download.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PdfExtractPageResponse:
      description: Represents the response to an extract page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        FileIds:
        - FileIds
        - FileIds
        FileData:
        - FileData
        - FileData
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        FileIds:
          description: Specifies the identifier(s) of the file(s) created as a result
            of the action.
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        FileData:
          description: Specifies the data of the file(s) created as a result of the
            action.
          items:
            format: byte
            type: string
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfExtractTextMode:
      description: Defines the different available modes for text extraction.
      enum:
      - WholePageReadable
      - PageAreaReadable
      - WholePageCSV
      type: string
    PdfExtractTextParameters:
      description: Represents the parameters for an extract text action.
      example:
        TextExtractionAreaWidth: 1.4658129
        FileId: FileId
        TextExtractionAreaLeft: 0.8008282
        TextExtractionAreaHeight: 5.962134
        PageRange: PageRange
        TextExtractionAreaTop: 6.0274563
        IncludeHeader: false
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            extract text from.
          type: string
        TextExtractionMode:
          $ref: '#/components/schemas/PdfExtractTextMode'
        TextExtractionAreaLeft:
          default: 0
          description: Specifies the left coordinate of the text extraction area for
            the PageAreaFormated extract mode.
          format: float
          type: number
        TextExtractionAreaTop:
          default: 0
          description: Specifies the top coordinate of the text extraction area for
            the PageAreaFormated extract mode.
          format: float
          type: number
        TextExtractionAreaWidth:
          default: 0
          description: Specifies the width of the text extraction area for the PageAreaFormated
            extract mode.
          format: float
          type: number
        TextExtractionAreaHeight:
          default: 0
          description: Specifies the height of the text extraction area for the PageAreaFormated
            extract mode.
          format: float
          type: number
        IncludeHeader:
          default: false
          description: Specifies whether the CSV output should include header information.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PageText:
      description: Holds the extracted text from a given page of a document.
      example:
        PageNumber: 6
        ExtractedText: ExtractedText
      properties:
        PageNumber:
          description: Specifies the number of the page.
          format: int32
          type: integer
        ExtractedText:
          description: The text extraction result.
          nullable: true
          type: string
      type: object
    PdfExtractTextResponse:
      description: Represents the response to an extract text action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        ExtractedText:
        - PageNumber: 6
          ExtractedText: ExtractedText
        - PageNumber: 6
          ExtractedText: ExtractedText
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        ExtractedText:
          description: The text extraction results from individual pages.
          items:
            $ref: '#/components/schemas/PageText'
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfFlattenParameters:
      description: Represents the parameters for a flatten action.
      example:
        FlattenFormFields: false
        FileId: FileId
        FlattenAnnotations: false
        FlattenLayers: false
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        FlattenAnnotations:
          default: false
          description: Specifies whether the annotations shall be flattened.
          type: boolean
        FlattenFormFields:
          default: false
          description: Specifies whether the form-fields shall be flattened.
          type: boolean
        FlattenLayers:
          default: false
          description: Specifies whether the layers shall be flattened.
          type: boolean
      required:
      - FileId
      type: object
    PdfFlattenResponse:
      description: Represents the response to a flatten action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfGetInfoParameters:
      description: Represents the parameters for a get info action.
      example:
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
      required:
      - FileId
      type: object
    EncryptionAlgorithm:
      description: Specifies the encryption algorithm.
      enum:
      - PdfEncryptionNone
      - PdfEncryption40BitRC4
      - PdfEncryption128BitRC4
      - PdfEncryption128BitAES
      - PdfEncryption256BitAES
      type: string
    PdfGetInfoResponse:
      description: Represents the response to a get info action request.
      example:
        CanPrint: true
        Keywords: Keywords
        CanFillFields: true
        CanAddNotes: true
        RemainingTokens: 0
        Metadata: Metadata
        CanPrintFull: true
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        Title: Title
        HasUserPassword: true
        CanAssemble: true
        Subject: Subject
        CanCopyAccess: true
        CanCopy: true
        CanModify: true
        PageCount: 6
        Producer: Producer
        Version: Version
        Author: Author
        HasOwnerPassword: true
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageCount:
          description: Specifies the number of pages of the PDF.
          format: int32
          readOnly: true
          type: integer
        Version:
          description: Specifies the version of the PDF.
          nullable: true
          readOnly: true
          type: string
        Author:
          description: Specifies the author name specified within the PDF, if any.
          nullable: true
          readOnly: true
          type: string
        Title:
          description: Specifies the document title specified within the PDF, if any.
          nullable: true
          readOnly: true
          type: string
        Subject:
          description: Specifies the document subject specified within the PDF, if
            any.
          nullable: true
          readOnly: true
          type: string
        Producer:
          description: Specifies the producer name specified within the PDF, if any.
          nullable: true
          readOnly: true
          type: string
        Metadata:
          description: Specifies the metadata contained within the PDF, if any.
          nullable: true
          readOnly: true
          type: string
        Keywords:
          description: Specifies the keywords associated with the PDF, if any.
          nullable: true
          readOnly: true
          type: string
        HasUserPassword:
          description: Specifies if the PDF is protected with a user password.
          readOnly: true
          type: boolean
        HasOwnerPassword:
          description: Specifies if the PDF is protected with a owner password.
          readOnly: true
          type: boolean
        Encryption:
          $ref: '#/components/schemas/EncryptionAlgorithm'
        CanPrint:
          description: Specifies if the user is allowed to print the document, but
            possibly not at the highest quality level.
          readOnly: true
          type: boolean
        CanCopy:
          description: Specifies if the user is allowed to copy or extract text and
            graphics from the document.
          readOnly: true
          type: boolean
        CanModify:
          description: Specifies if the user is allowed to modify the document.
          readOnly: true
          type: boolean
        CanAddNotes:
          description: Specifies if the user is allowed to add annotations.
          readOnly: true
          type: boolean
        CanFillFields:
          description: Specifies if the user is allowed to fill-in form fields.
          readOnly: true
          type: boolean
        CanCopyAccess:
          description: Specifies if the user is allowed for copying or extracting
            for use with accessibility features.
          readOnly: true
          type: boolean
        CanAssemble:
          description: Specifies if the user is allowed to assemble the document.
          readOnly: true
          type: boolean
        CanPrintFull:
          description: Specifies if the user is allowed to print the document with
            high resolution.
          readOnly: true
          type: boolean
      type: object
    PdfGetPageThumbnailParameters:
      description: Represents the parameters for a get page thumbnail action.
      example:
        ThumbnailHeight: 6
        ThumbnailWidth: 0
        FileId: FileId
        ThumbnailFitToPageSize: true
        PageRange: PageRange
        BackgroundColor: rgba(0,0,0,0)
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the range of pages to get a thumbnail
            from.
          type: string
        ThumbnailWidth:
          default: 140
          description: Specifies the width, in points, of the thumbnail(s).
          format: int32
          type: integer
        ThumbnailHeight:
          default: 220
          description: Specifies the height, in points, of the thumbnail(s).
          format: int32
          type: integer
        BackgroundColor:
          default: rgba(0,0,0,0)
          description: 'Specifies the background color of the thumbnail(s), using
            the color name (ie: "red") or its RGBa code (ie: "rgba(255,0,0,1)").'
          nullable: true
          type: string
        ThumbnailFitToPageSize:
          default: true
          description: Specifies if the size of the produced thumbnail is automatically
            adjusted to don't have any margin.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PdfGetPageThumbnailResponse:
      description: Represents the response to a get page thumbnail action request.
      example:
        PageThumbnails:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageThumbnails:
          description: Contains all the obtained thumbnails.
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfInsertImageParameters:
      description: Represents the parameters for an insert image action.
      example:
        ImageFileId: ImageFileId
        ImageData: ImageData
        Quality: 0
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the range of pages where the image shall
            be inserted.
          type: string
        ImageData:
          description: Specifies the data of the image to be inserted.
          format: byte
          nullable: true
          type: string
        ImageFileId:
          default: ""
          description: Specifies the file ID of the image to be drawn.
          nullable: true
          type: string
        Quality:
          default: 75
          description: Specifies the level of quality to be used for the compression,
            from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
        ColorImageCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
        BitonalCompression:
          $ref: '#/components/schemas/PdfImageCompressionScheme'
      required:
      - FileId
      - PageRange
      type: object
    PdfInsertImageResponse:
      description: Represents the response to an insert image action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfInsertNewPageParameters:
      description: Represents the parameters for an insert new page action.
      example:
        PageCount: 6
        PageNumber: 0
        FileId: FileId
        Height: 5.962134
        Width: 1.4658129
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageNumber:
          description: Specifies the number of the page where the new page(s) shall
            be inserted.
          format: int32
          type: integer
        PageCount:
          default: 1
          description: Specifies the number of pages that must be inserted.
          format: int32
          type: integer
        Width:
          default: 595
          description: Specifies, in points, the width of the page(s) to be inserted.
          format: float
          type: number
        Height:
          default: 842
          description: Specifies, in points, the height of the page(s) to be inserted.
          format: float
          type: number
      required:
      - FileId
      - PageNumber
      type: object
    PdfInsertNewPageResponse:
      description: Represents the response to an insert new page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PageNumberFormat:
      description: Defines the different formats available for the page number insertion.
      enum:
      - PageNumber
      - PagePageNumber
      - PagePageNumberOfPageCount
      - CustomFormatting
      type: string
    PdfInsertPageNumberParameters:
      description: Represents the parameters for an insert page number action.
      example:
        TextParameters:
          FontSize: 6
          FontName: FontName
          Text: Text
          TextColor: black
        Layout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the range of pages on which the page
            number shall be inserted.
          type: string
        Format:
          $ref: '#/components/schemas/PageNumberFormat'
        Layout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
        TextParameters:
          $ref: '#/components/schemas/PdfAlignedTextParameters'
      required:
      - FileId
      - PageRange
      type: object
    PdfInsertPageNumberResponse:
      description: Represents the response to an insert page number action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfInsertTextParameters:
      description: Represents the parameters for an insert text action.
      example:
        TextParameters:
          FontSize: 6
          FontName: FontName
          Text: Text
          TextColor: black
        TextBoundingBoxLayout:
          AbsolutePositionTop: 6.0274563
          AbsoluteHeight: 5.962134
          AbsolutePositionLeft: 0.8008282
          AbsoluteWidth: 1.4658129
          IndentFromEdges: true
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages on
            which the text shall be inserted.
          type: string
        TextParameters:
          $ref: '#/components/schemas/PdfAlignedTextParameters'
        TextBoundingBoxLayout:
          $ref: '#/components/schemas/DrawableContentLayoutParameters'
      required:
      - FileId
      - PageRange
      - TextParameters
      type: object
    PdfInsertTextResponse:
      description: Represents the response to an insert text action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfLinearizeParameters:
      description: Represents the parameters for a linearize action.
      example:
        PackDocument: false
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PackDocument:
          default: false
          description: Specifies whether the document shall be packed, in order to
            reduce its size.
          type: boolean
      required:
      - FileId
      type: object
    PdfLinearizeResponse:
      description: Represents the response to a linearize action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfLoadDocumentFromByteArrayParameters:
      description: Represents the parameters for a load document action request.
      example:
        FileName: FileName
        EnableColorDetection: false
        ThumbnailWidth: 0
        TxtPageMarginRight: 7.0614014
        TxtPageMarginLeft: 5.637377
        TxtPageMarginTop: 2.302136
        ThumbnailFitToPageSize: true
        TxtPageMarginBottom: 9.301444
        ThumbnailBackgroundColor: rgba(0,0,0,0)
        ThumbnailHeight: 6
        TxtFontBold: false
        TxtFontFamily: Arial Unicode MS
        TxtFontItalic: false
        GetPreview: false
        Content: Content
        TxtPageWidth: 1.4658129
        TxtPageHeight: 5.962134
        TxtFontSize: 3.6160767
        Password: Password
      properties:
        Content:
          description: Specifies the data of the document.
          format: byte
          type: string
        FileName:
          description: Specifies the name of the document.
          nullable: true
          type: string
        Password:
          description: Specifies the password of the document.
          nullable: true
          type: string
        Conformance:
          $ref: '#/components/schemas/PdfConformance'
        ContentEncoding:
          $ref: '#/components/schemas/ContentEncoding'
        EnableColorDetection:
          default: false
          description: Specifies whether color detection must be used while importing
            a raster format to PDF.
          type: boolean
        GetPreview:
          default: false
          description: Specifies whether the response must contain a thumbnail of
            the first page of the document.
          type: boolean
        ThumbnailWidth:
          default: 140
          description: Specifies, in pixels, the width of the thumbnail to be retrieved.
            Only applicable if GetPreview has been set to true.
          format: int32
          type: integer
        ThumbnailHeight:
          default: 220
          description: Specifies, in pixels, the height of the thumbnail to be retrieved.  Only
            applicable if GetPreview has been set to true.
          format: int32
          type: integer
        ThumbnailBackgroundColor:
          default: rgba(0,0,0,0)
          description: "Specifies the background color of the thumbnail, using the\
            \ color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").\r\
            \n Only applicable if GetPreview has been set to true."
          nullable: true
          type: string
        ThumbnailFitToPageSize:
          default: true
          description: "Specifies if the size of the produced thumbnail is automatically\
            \ adjusted to don't have any margin.\r\nOnly applicable if GetPreview\
            \ has been set to true."
          type: boolean
        TxtPageWidth:
          default: 595
          description: Specifies the page width, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageHeight:
          default: 842
          description: Specifies the page height, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginLeft:
          default: 10
          description: Specifies the page margin left, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginTop:
          default: 10
          description: Specifies the page margin top, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginRight:
          default: 10
          description: Specifies the page margin right, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginBottom:
          default: 10
          description: Specifies the page margin bottom, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtHorizontalTextAlignment:
          $ref: '#/components/schemas/TextAlignment'
        TxtFontSize:
          default: 12
          description: Specifies the text size, in points, to be used for producing
            documents from txt files.
          format: float
          type: number
        TxtFontFamily:
          default: Arial Unicode MS
          description: Specifies the name of the font to be used for producing documents
            from txt files.
          nullable: true
          type: string
        TxtFontBold:
          default: false
          description: Specifies whether the font to be used for producing documents
            from txt files must have a bold style.
          type: boolean
        TxtFontItalic:
          default: false
          description: Specifies whether the font to be used for producing documents
            from txt files must have an italic style.
          type: boolean
      required:
      - Content
      type: object
    PdfLoadDocumentResponse:
      description: Represents the response to a load document action request.
      example:
        PageCount: 6
        ThumbnailData: ThumbnailData
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        FileId: FileId
        PasswordIsRequired: true
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        FileId:
          description: Specifies the file identifier of the loaded document.
          nullable: true
          readOnly: true
          type: string
        PageCount:
          description: Specifies the number of pages into the loaded document.
          format: int32
          readOnly: true
          type: integer
        Encryption:
          $ref: '#/components/schemas/EncryptionAlgorithm'
        PasswordIsRequired:
          description: "Specifies if a password will be subsequently required to open\
            \ the document.\r\nPassword can be provided using the SetPassword action\
            \ / method."
          readOnly: true
          type: boolean
        ThumbnailData:
          description: Specifies the data of a thumbnail from the first page of the
            document, in PNG format. Only applicable if the GetPreview field of the
            request has been set to true.
          format: byte
          nullable: true
          readOnly: true
          type: string
      type: object
    PdfLoadDocumentParameters:
      description: Represents the parameters for importing a document as PDF.
      properties:
        FileName:
          description: Specifies the name of the document.
          nullable: true
          type: string
        Password:
          description: Specifies the password of the document.
          nullable: true
          type: string
        Conformance:
          $ref: '#/components/schemas/PdfConformance'
        ContentEncoding:
          $ref: '#/components/schemas/ContentEncoding'
        EnableColorDetection:
          default: false
          description: Specifies whether color detection must be used while importing
            a raster format to PDF.
          type: boolean
        GetPreview:
          default: false
          description: Specifies whether the response must contain a thumbnail of
            the first page of the document.
          type: boolean
        ThumbnailWidth:
          default: 140
          description: Specifies, in pixels, the width of the thumbnail to be retrieved.
            Only applicable if GetPreview has been set to true.
          format: int32
          type: integer
        ThumbnailHeight:
          default: 220
          description: Specifies, in pixels, the height of the thumbnail to be retrieved.  Only
            applicable if GetPreview has been set to true.
          format: int32
          type: integer
        ThumbnailBackgroundColor:
          default: rgba(0,0,0,0)
          description: "Specifies the background color of the thumbnail, using the\
            \ color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").\r\
            \n Only applicable if GetPreview has been set to true."
          nullable: true
          type: string
        ThumbnailFitToPageSize:
          default: true
          description: "Specifies if the size of the produced thumbnail is automatically\
            \ adjusted to don't have any margin.\r\nOnly applicable if GetPreview\
            \ has been set to true."
          type: boolean
        TxtPageWidth:
          default: 595
          description: Specifies the page width, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageHeight:
          default: 842
          description: Specifies the page height, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginLeft:
          default: 10
          description: Specifies the page margin left, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginTop:
          default: 10
          description: Specifies the page margin top, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginRight:
          default: 10
          description: Specifies the page margin right, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtPageMarginBottom:
          default: 10
          description: Specifies the page margin bottom, in points, of produced documents
            from txt files.
          format: float
          type: number
        TxtHorizontalTextAlignment:
          $ref: '#/components/schemas/TextAlignment'
        TxtFontSize:
          default: 12
          description: Specifies the text size, in points, to be used for producing
            documents from txt files.
          format: float
          type: number
        TxtFontFamily:
          default: Arial Unicode MS
          description: Specifies the name of the font to be used for producing documents
            from txt files.
          nullable: true
          type: string
        TxtFontBold:
          default: false
          description: Specifies whether the font to be used for producing documents
            from txt files must have a bold style.
          type: boolean
        TxtFontItalic:
          default: false
          description: Specifies whether the font to be used for producing documents
            from txt files must have an italic style.
          type: boolean
      type: object
    PdfMergeParameters:
      description: Represents the parameters for a merge action.
      example:
        FilesId:
        - FilesId
        - FilesId
        IncludeAttachments: true
      properties:
        FilesId:
          description: Specifies the identifiers of the documents to be merged.
          items:
            type: string
          type: array
        IncludeAttachments:
          default: true
          description: Specifies if file attachments should be included in merged
            document.
          type: boolean
      required:
      - FilesId
      type: object
    PdfMergeResponse:
      description: Represents the response to a merge action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        FileId: FileId
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        FileId:
          description: Specifies the file identifier of the merged document.
          nullable: true
          readOnly: true
          type: string
      type: object
    PdfMergePagesParameters:
      description: Represents the parameters for a merge pages action request.
      example:
        FileId: FileId
        RemovePages: true
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the range of pages to be combined.
          type: string
        RemovePages:
          description: Specifies whether the merged pages shall be removed from the
            document.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PdfMergePagesResponse:
      description: Represents the response to a merge pages action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfMovePageParameters:
      description: Represents the parameters for a move pages action.
      example:
        SourcePageRange: SourcePageRange
        FileId: FileId
        DestinationPage: 0
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        SourcePageRange:
          description: Specifies the number of the page, or the range of pages to
            be moved.
          type: string
        DestinationPage:
          description: Specifies the number of the destination page.
          format: int32
          type: integer
      required:
      - DestinationPage
      - FileId
      - SourcePageRange
      type: object
    PdfMovePageResponse:
      description: Represents the response to a move page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfOCRParameters:
      description: Represents the parameters for an OCR action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the page range to be processed.
          type: string
        Language:
          default: eng
          description: Specifies the language to be used for the OCR.
          nullable: true
          type: string
        SkipPageWithText:
          default: true
          description: Specifies if pages containing text must be ignored (in such
            case no token is charged).
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PdfOCRResponse:
      description: Represents the response to an OCR action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfProtectParameters:
      description: Represents the parameters for a protect action.
      example:
        OwnerPassword: OwnerPassword
        CanPrint: true
        CanCopy: true
        CanModify: true
        CanFillFields: true
        CanAddNotes: true
        CanPrintFull: true
        UserPassword: UserPassword
        FileId: FileId
        CanAssemble: true
        CanCopyAccess: true
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        OwnerPassword:
          default: ""
          description: Specifies the owner password to be set.
          nullable: true
          type: string
        UserPassword:
          default: ""
          description: Specifies the user password to be set.
          nullable: true
          type: string
        Encryption:
          $ref: '#/components/schemas/EncryptionAlgorithm'
        CanPrint:
          default: true
          description: Allows the user to print the document, but possibly not at
            the highest quality level. Ignored if no encryption algorithm is set.
          type: boolean
        CanCopy:
          default: true
          description: Allows the user to copy or extract text and graphics from the
            document. Ignored if the no encryption scheme is set.
          type: boolean
        CanModify:
          default: true
          description: Allows the user to modify the document. Ignored if the no encryption
            scheme is set.
          type: boolean
        CanAddNotes:
          default: true
          description: Allows the user to add annotations. Ignored if the no encryption
            scheme is set.
          type: boolean
        CanFillFields:
          default: true
          description: Allows the user to fill-in form fields. Only works with 128-bit
            encryption.
          type: boolean
        CanCopyAccess:
          default: true
          description: Enables copying or extracting for use with accessibility features.
            Only works with 128-bit encryption.
          type: boolean
        CanAssemble:
          default: true
          description: Allows the user to assemble the document. Only works with 128-bit
            encryption.
          type: boolean
        CanPrintFull:
          default: true
          description: Allows high resolution printing of the document. Only works
            with 128-bit encryption.
          type: boolean
      required:
      - FileId
      type: object
    PdfProtectResponse:
      description: Represents the response to a protect action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfReadBarcodesParameters:
      description: Represents the parameters for a read barcode action.
      example:
        ScanBarcodePDF417: true
        ScanBarcodeDataMatrix: true
        ScanBarcodeAztec: true
        ScanBarcodeQR: true
        FileId: FileId
        ScanBarcode1D: true
        ScanBarcodeMicroQR: true
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages to
            read the barcodes from.
          type: string
        ScanMode:
          $ref: '#/components/schemas/ScanMode'
        ScanBarcode1D:
          default: true
          description: Specifies whether the barcodes of type 1D shall be read.
          type: boolean
        ScanBarcodeQR:
          default: true
          description: Specifies whether the barcodes of type QR shall be read.
          type: boolean
        ScanBarcodeMicroQR:
          default: true
          description: Specifies whether the barcodes of type Micro QR shall be read.
          type: boolean
        ScanBarcodePDF417:
          default: true
          description: Specifies whether the barcodes of type PDF 147 shall be read.
          type: boolean
        ScanBarcodeDataMatrix:
          default: true
          description: Specifies whether the barcodes of type Data Matrix shall be
            read.
          type: boolean
        ScanBarcodeAztec:
          default: true
          description: Specifies whether the barcodes of type Aztec shall be read.
          type: boolean
      required:
      - FileId
      - PageRange
      type: object
    PdfVersion:
      description: Specifies a PDF version for a reduced document.
      enum:
      - PdfVersionRetainExisting
      - PdfVersion14
      - PdfVersion15
      - PdfVersion16
      - PdfVersion17
      - PdfVersionA1a
      - PdfVersionA1b
      - PdfVersionA2a
      - PdfVersionA2b
      type: string
    ImageQuality:
      description: Specifies the quality to be used for the compression of the images
        of the docuent.
      enum:
      - ImageQualityLow
      - ImageQualityMedium
      - ImageQualityHigh
      - ImageQualityVeryHigh
      type: string
    PdfReduceParameters:
      description: Represents the parameters for a reduce action.
      example:
        RemoveEmbeddedFiles: false
        EnableCharRepair: false
        RemoveBlankPages: false
        DownscaleResolution: 0
        PackDocument: true
        EnableJBIG2: true
        RemoveMetadata: false
        RecompressImages: true
        JBIG2PMSThreshold: 1.4658129
        RemoveBookmarks: false
        RemovePagePieceInfo: false
        EnableColorDetection: true
        PreserveSmoothing: false
        PackFonts: true
        RemovePageThumbnails: false
        EnableMRC: false
        RemoveJavaScript: false
        DownscaleImages: true
        FastWebView: false
        DownscaleResolutionMRC: 6
        FileId: FileId
        EnableJPEG2000: true
        RemoveHyperlinks: false
        RemoveAnnotations: false
        RemoveFormFields: false
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        OutputVersion:
          $ref: '#/components/schemas/PdfVersion'
        ImageQuality:
          $ref: '#/components/schemas/ImageQuality'
        RecompressImages:
          default: true
          description: Specifies whether the images from the PDF shall be recompressed.
          type: boolean
        EnableColorDetection:
          default: true
          description: Specifies whether color detection must be performed on the
            images from the PDF.
          type: boolean
        PackDocument:
          default: true
          description: Specifies whether the PDF shall be packed when saved in order
            to reduce its size.
          type: boolean
        PackFonts:
          default: true
          description: Specifies whether the PDF fonts must be packed in order to
            reduce their size.
          type: boolean
        DownscaleImages:
          default: true
          description: Specifies whether the images from the PDF shall be downscaled.
          type: boolean
        DownscaleResolution:
          default: 150
          description: Specifies the resolution to be used to downscale images.
          format: int32
          type: integer
        FastWebView:
          default: false
          description: Specifies whether the PDF shall be optimized for online distribution.
          type: boolean
        RemoveFormFields:
          default: false
          description: Specifies whether the form fields shall be removed from the
            PDF.
          type: boolean
        RemoveAnnotations:
          default: false
          description: Specifies whether the annotations shall be removed from the
            PDF.
          type: boolean
        RemoveBookmarks:
          default: false
          description: Specifies whether the bookmarks shall be removed from the PDF.
          type: boolean
        RemoveHyperlinks:
          default: false
          description: Specifies whether the hyperlinks shall be removed from the
            PDF.
          type: boolean
        RemoveEmbeddedFiles:
          default: false
          description: Specifies whether the embedded files shall be removed from
            the PDF.
          type: boolean
        RemoveBlankPages:
          default: false
          description: Specifies whether the blank pages shall be removed.
          type: boolean
        RemoveJavaScript:
          default: false
          description: Specifies whether the JavaScript shall be removed.
          type: boolean
        EnableJPEG2000:
          default: true
          description: Specifies whether the JPEG2000 compression scheme shall be
            used to compress the images of the PDF.
          type: boolean
        EnableJBIG2:
          default: true
          description: Specifies whether the JBIG2 compression scheme shall be used
            to compress the bitonal images of the PDF.
          type: boolean
        EnableCharRepair:
          default: false
          description: Specifies whether characters repairing shall be performed during
            bitonal conversion.
          type: boolean
        EnableMRC:
          default: false
          description: Specifies whether MRC shall be used for compressing the PDF
            contents.
          type: boolean
        PreserveSmoothing:
          default: false
          description: Specifies if the MRC engine shall try to preserve smoothing
            between different layers.
          type: boolean
        DownscaleResolutionMRC:
          default: 100
          description: Specifies the resolution for downscaling the background layer
            by the MRC engine, if any.
          format: int32
          type: integer
        RemoveMetadata:
          default: false
          description: Specifies whether the metadata shall be removed.
          type: boolean
        RemovePageThumbnails:
          default: false
          description: Specifies whether the page thumbnails shall be removed.
          type: boolean
        RemovePagePieceInfo:
          default: false
          description: Specifies whether the page PieceInfo dictionary used to hold
            private application data shall be removed.
          type: boolean
        JBIG2PMSThreshold:
          default: 0.85
          description: Specifies the threshold value for the JBIG2 encoder pattern
            matching and substitution between 0 and 1. Any number lower than 1 may
            lead to lossy compression.
          format: float
          type: number
      required:
      - FileId
      type: object
    ReduceErrorCode:
      description: Specifies the different errors which can cause the failure of a
        reduce action.
      enum:
      - OK
      - GetPageImagesCount
      - MRCPostOperationsFailure
      - PageConversionFailure
      - DocumentEncrypted
      - UnexpectedError
      type: string
    ReduceErrorInfo:
      description: Represents information about an error which caused the failure
        of a reduce action.
      example:
        PageNumber: 6
        ExtErrorMessage: ExtErrorMessage
      properties:
        ErrorCode:
          $ref: '#/components/schemas/ReduceErrorCode'
        PageNumber:
          description: The number of the page processed when the error occured.
          format: int32
          readOnly: true
          type: integer
        ExtErrorMessage:
          description: The error message associated with the error, if any.
          nullable: true
          readOnly: true
          type: string
      type: object
    ReduceWarningCode:
      description: Specifies the different warnings which can occur during the process
        of a reduce action.
      enum:
      - OK
      - ImageExtractionFailure
      - ColorDetectionFailure
      - ImageResizeFailure
      - ImageCropFailure
      - ImageResolutionObtentionFailure
      - ImageReplacementFailure
      - MRCImageReplacementFailure
      - PageSelectionFailure
      - ImageObtentionFailure
      - FileSizeReductionFailure
      - BlankPageRemovalFailure
      type: string
    ReduceWarningInfo:
      description: Represents information about a warning that occured during a reduce
        action.
      example:
        ExtWarningMessage: ExtWarningMessage
        PageNumber: 1
        PageImageNumber: 5
      properties:
        WarningCode:
          $ref: '#/components/schemas/ReduceWarningCode'
        PageNumber:
          description: The number of the page processed when the warning occured.
          format: int32
          readOnly: true
          type: integer
        PageImageNumber:
          description: The number of the image of the page processed when the warning
            occured.
          format: int32
          readOnly: true
          type: integer
        ExtWarningMessage:
          description: The warning message associated with the warning, if any.
          nullable: true
          readOnly: true
          type: string
      type: object
    PdfReduceResponse:
      description: Represents the response to a reduce action request.
      example:
        ContentRemoved: true
        VersionChanged: true
        WarningsInfo:
        - ExtWarningMessage: ExtWarningMessage
          PageNumber: 1
          PageImageNumber: 5
        - ExtWarningMessage: ExtWarningMessage
          PageNumber: 1
          PageImageNumber: 5
        ErrorInfo:
          PageNumber: 6
          ExtErrorMessage: ExtErrorMessage
        NewFileSize: 5
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        ErrorInfo:
          $ref: '#/components/schemas/ReduceErrorInfo'
        WarningsInfo:
          description: Specifies the different warnings that occured during the process
            of the reduce action.
          items:
            $ref: '#/components/schemas/ReduceWarningInfo'
          nullable: true
          readOnly: true
          type: array
        ContentRemoved:
          description: Specifies whether content has been removed from the PDF during
            the process of the reduce action.
          readOnly: true
          type: boolean
        VersionChanged:
          description: Specifies whether the version of the PDF has changed during
            the process of the reduce action.
          readOnly: true
          type: boolean
        NewFileSize:
          description: Specify the size of the new created document.
          format: int64
          readOnly: true
          type: integer
      type: object
    PdfRemovePageFormFieldsParameters:
      description: Represents the parameters for a remove page form fields action.
      example:
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the page or the page range whose form fields shall
            be removed.
          type: string
      required:
      - FileId
      - PageRange
      type: object
    PdfRemovePageFormFieldsResponse:
      description: Represents the response to a remove page form fields action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfReorderPagesParameters:
      description: Represents the parameters for a reorder pages action.
      example:
        PageOrder: PageOrder
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageOrder:
          description: "Specifies the new pages order. Must contains page numbers\
            \ separated by ';' or ','.\r\nExample for a 6-pages document: \"1;2;4;3;6;5\"\
            ."
          type: string
      required:
      - FileId
      - PageOrder
      type: object
    PdfReorderPagesResponse:
      description: Represents the response to a swap pages action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfRepairDocumentParameters:
      description: Represents the parameters for a repair document action.
      example:
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
      required:
      - FileId
      type: object
    PdfRepairDocumentResponse:
      description: Represents the response to a repair document action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        FileId: FileId
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        FileId:
          description: Specifies the file identifier of the repaired document.
          nullable: true
          readOnly: true
          type: string
      type: object
    PdfRotatePageStandardParameters:
      description: Represents the parameters for a rotate page standard action.
      example:
        FlipHorizontally: false
        RotationAngle: 0
        FlipVertically: false
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: "Specifies the number of the page, or the range of pages to\
            \ be rotated.\r\nYou can specify different page rotations using such pattern:\
            \ Page Range = \"M:1:90;2:270\". In this example, a rotation of 90 degrees\
            \ will be applied to the page 1 and 270 degrees to the page 2."
          type: string
        RotationAngle:
          description: "Specifies the rotation angle, clockwise in degrees, which\
            \ can be either positive and negative and any multiple of 90.\r\nUse 0\
            \ in case of special pattern usage for the PageRange property."
          format: int32
          type: integer
        FlipHorizontally:
          default: false
          description: "Specifies whether the page(s) shall be flipped horizontally.\r\
            \nThis parameter is ignored if PageRange start with \"M:\"."
          type: boolean
        FlipVertically:
          default: false
          description: "Specifies whether the page(s) shall be flipped vertically.\r\
            \nThis parameter is ignored if PageRange start with \"M:\"."
          type: boolean
      required:
      - FileId
      - PageRange
      - RotationAngle
      type: object
    PdfRotatePageStandardResponse:
      description: Represents the response to a rotate page standard action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfSaveAsJPEGParameters:
      description: Represents the parameters for a save as JPEG acion.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as JPEG.
          nullable: true
          type: string
        Quality:
          default: 75
          description: Specifies the level of quality to be used for the JPEG compression,
            from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
        Progressive:
          default: false
          description: Specifies if the encoded JPEG image must be progressive.
          type: boolean
        Resolution:
          default: 200
          description: Specifies the resolution to be used for the rendition process.
          format: float
          type: number
        RenderFormFields:
          default: false
          description: Specifies whether the form fields of the PDF shall be rendered.
          type: boolean
        KeepRasterPDFResolution:
          default: true
          description: Specifies if the initial image resolution must be kept in case
            of raster-pdf processing.
          type: boolean
      required:
      - FileId
      type: object
    PdfSaveAsJPEGResponse:
      description: Represents the response to a save as JPEG action request.
      example:
        RemainingTokens: 0
        PageImages:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageImages:
          description: The page(s) of the PDF saved as JPEG image(s).
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfSaveAsPNGParameters:
      description: Represents the parameters for a save as PNG acion.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as PNG.
          nullable: true
          type: string
        Compression:
          default: 6
          description: Specifies the level of compression to be used for the PNG output,
            between 0 (no compression - faster encoding) to 9(max compression - slower
            encoding).
          format: int32
          type: integer
        Interlaced:
          default: false
          description: Specifies if the produced PNG image must be interlaced.
          type: boolean
        Resolution:
          default: 200
          description: Specifies the resolution to be used for the rendition process.
          format: float
          type: number
        RenderFormFields:
          default: false
          description: Specifies whether the form fields of the PDF shall be rendered.
          type: boolean
        KeepRasterPDFResolution:
          default: true
          description: Specifies if the initial image resolution must be kept in case
            of raster-pdf processing.
          type: boolean
      required:
      - FileId
      type: object
    PdfSaveAsPNGResponse:
      description: Represents the response to a save as PNG action request.
      example:
        RemainingTokens: 0
        PageImages:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageImages:
          description: The page(s) of the PDF saved as PNG image(s).
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfSaveAsTIFFParameters:
      description: Represents the parameters for a save as TIFF action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as TIFF.
          nullable: true
          type: string
        Compression:
          $ref: '#/components/schemas/TiffSaveCompression'
        JpegQuality:
          default: 75
          description: Specifies the level of quality to be used if JPEG compression
            is used, from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
        UseCMYK:
          default: false
          description: Specifies whether the TIFF shall be saved in CMYK color space
            or not.
          type: boolean
        Resolution:
          default: 200
          description: Specifies the resolution to be used for the rendition process.
          format: float
          type: number
        RenderFormFields:
          default: false
          description: Specifies whether the form fields of the PDF shall be rendered.
          type: boolean
        KeepRasterPDFResolution:
          default: true
          description: Specifies whether the initial image resolution must be kept
            in case of raster-pdf processing.
          type: boolean
      required:
      - FileId
      type: object
    PdfSaveAsTIFFResponse:
      description: Represents the response to a save as TIFF action request.
      example:
        RemainingTokens: 0
        PageImages:
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        - PageNumber: 6
          ImageData: ImageData
          FileName: FileName
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        PageImages:
          description: The page(s) of the PDF saved as TIFF image(s).
          items:
            $ref: '#/components/schemas/PageImage'
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfSaveAsTIFFMultipageParameters:
      description: Represents the parameters for a save as TIFF multipage action.
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          default: '*'
          description: Specifies the number of the page, or the range of pages to
            be saved as TIFF.
          nullable: true
          type: string
        Compression:
          $ref: '#/components/schemas/TiffSaveCompression'
        JpegQuality:
          default: 75
          description: Specifies the level of quality to be used if JPEG compression
            is used, from 1 (poorest) to 100 (greatest).
          format: int32
          type: integer
        Resolution:
          default: 200
          description: Specifies the resolution to be used for the rendition process.
          format: float
          type: number
        RenderFormFields:
          default: false
          description: Specifies whether the form fields of the PDF shall be rendered.
          type: boolean
        KeepRasterPDFResolution:
          default: true
          description: Specifies whether the initial image resolution must be kept
            in case of raster-pdf processing.
          type: boolean
      required:
      - FileId
      type: object
    PdfSaveAsTIFFMultipageResponse:
      description: Represents the response to a save as TIFF multipage action request.
      example:
        ImageData: ImageData
        FileName: FileName
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        ImageData:
          description: Specifies the data of the produced multipage TIFF.
          format: byte
          nullable: true
          readOnly: true
          type: string
        FileName:
          description: Specifies the name of the saved document.
          nullable: true
          readOnly: true
          type: string
      type: object
    PdfSaveDocumentParameters:
      description: Represents the parameters for a save document action.
      example:
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
      required:
      - FileId
      type: object
    PdfSaveDocumentResponse:
      description: Represents the response to a save document action request.
      example:
        FileName: FileName
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        Data: Data
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        Data:
          description: Specifies the data of the saved document.
          format: byte
          nullable: true
          readOnly: true
          type: string
        FileName:
          description: Specifies the name of the saved document.
          nullable: true
          readOnly: true
          type: string
      type: object
    PdfScalePageParameters:
      description: Represents the parameters for a scale page action.
      example:
        FileId: FileId
        ScaleY: 6.0274563
        ScaleX: 0.8008282
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of pages which
            shall be scaled.
          type: string
        ScaleX:
          description: Specifies the horizontal scale factor, by which the width of
            the page shall be multiplied.
          format: float
          type: number
        ScaleY:
          description: Specifies the horizontal scale factor, by which the height
            of the page shall be multiplied.
          format: float
          type: number
      required:
      - FileId
      - PageRange
      - ScaleX
      - ScaleY
      type: object
    PdfScalePageResponse:
      description: Represents the response to a scale page action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfSetInfoParameters:
      description: Represents the parameters for a set info action.
      example:
        Keywords: Keywords
        Producer: Producer
        Metadata: Metadata
        Author: Author
        Title: Title
        FileId: FileId
        ClearEmptyValues: false
        Subject: Subject
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        Author:
          default: ""
          description: Specifies the author name specified within the PDF, if any.
          nullable: true
          type: string
        Title:
          default: ""
          description: Specifies the document title specified within the PDF, if any.
          nullable: true
          type: string
        Subject:
          default: ""
          description: Specifies the document subject specified within the PDF, if
            any.
          nullable: true
          type: string
        Producer:
          default: ""
          description: Specifies the producer name specified within the PDF, if any.
          nullable: true
          type: string
        Metadata:
          default: ""
          description: Specifies the metadata contained within the PDF, if any.
          nullable: true
          type: string
        Keywords:
          default: ""
          description: Specifies the keywords associated with the PDF, if any.
          nullable: true
          type: string
        ClearEmptyValues:
          default: false
          description: Specifies whether the empty info values shall be cleared.
          type: boolean
      required:
      - FileId
      type: object
    PdfSetInfoResponse:
      description: Represents the response to a set info action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfInitViewPageMode:
      description: Defines how the document shall be displayed when opened.
      enum:
      - None
      - Outline
      - Thumbnails
      - FullScreen
      - OC
      - Attachments
      type: string
    PdfInitViewLayoutMode:
      description: Specifies the page layout to be used when the document is opened.
      enum:
      - SinglePage
      - OneColumn
      - TwoColumnLeft
      - TwoColumnRight
      - TwoPageLeft
      - TwoPageRight
      type: string
    PdfInitViewNonFullScreenPageMode:
      description: Defines how the document shall be displayed when exiting full-screen
        mode.
      enum:
      - None
      - Outline
      - Thumbnails
      - OC
      type: string
    PdfSetInitialViewParameters:
      description: Represents the parameters for a set initial view action.
      example:
        CenterWindow: false
        DisplayDocTitle: false
        HideMenubar: false
        HideWindowUI: false
        FitWindow: false
        OpenZoom: 6.0274563
        FileId: FileId
        OpenPage: 0
        HideToolbar: false
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageMode:
          $ref: '#/components/schemas/PdfInitViewPageMode'
        LayoutMode:
          $ref: '#/components/schemas/PdfInitViewLayoutMode'
        NonFullScreenPageMode:
          $ref: '#/components/schemas/PdfInitViewNonFullScreenPageMode'
        OpenPage:
          default: 1
          description: Specifies which page should be displayed when the document
            is opened.
          format: int32
          type: integer
        OpenZoom:
          default: 1
          description: Specifies the default zoom factor to be used when the document
            is opened. Value of 1 to represent the 100% zoom, 2 means 200%, 0,5 means
            50%, etc.
          format: float
          type: number
        HideToolbar:
          default: false
          description: 'A flag specifying whether to hide the viewer application’s
            tool bars when the document is active. Default value: false.'
          type: boolean
        HideMenubar:
          default: false
          description: '(Optional) A flag specifying whether to hide the viewer application’s
            menu bar when the document is active. Default value: false.'
          type: boolean
        HideWindowUI:
          default: false
          description: "(Optional) A flag specifying whether to hide user interface\
            \ elements in the document’s window (such as scroll bars and navigation\
            \ controls),\r\nleaving only the document’s contents displayed. Default\
            \ value: false."
          type: boolean
        FitWindow:
          default: false
          description: '(Optional) A flag specifying whether to resize the document’s
            window to fit the size of the first displayed page. Default value: false.'
          type: boolean
        CenterWindow:
          default: false
          description: '(Optional) A flag specifying whether to position the document’s
            window in the center of the screen. Default value: false.'
          type: boolean
        DisplayDocTitle:
          default: false
          description: "(Optional; PDF 1.4) A flag specifying whether the window’\
            s title bar should display the document title taken from the Title entry\
            \ of the document information dictionary.\r\nIf false, the title bar should\
            \ instead display the name of the PDF file containing the document. Default\
            \ value: false."
          type: boolean
      required:
      - FileId
      type: object
    PdfSetInitialViewResponse:
      description: Represents the response to a set initial view action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfPageBox:
      description: Defines the boundary boxes (page boxes) that relate to the size
        of the pages in the PDF document.
      enum:
      - MediaBox
      - CropBox
      - BleedBox
      - TrimBox
      - ArtBox
      type: string
    PdfSetPageBoxParameters:
      description: Represents the parameters for a SetPageBox action.
      example:
        Left: 0.8008282
        Top: 6.0274563
        Right: 1.4658129
        Bottom: 5.962134
        FileId: FileId
        PageRange: PageRange
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        PageRange:
          description: Specifies the number of the page, or the range of page whose
            page box shall be set.
          type: string
        Left:
          description: Specifies, in points, the newly defined left position of the
            specified page box.
          format: float
          type: number
        Top:
          description: Specifies, in points, the newly defined top position of the
            specified page box.
          format: float
          type: number
        Right:
          description: Specifies, in points, the newly defined right position of the
            specified page box.
          format: float
          type: number
        Bottom:
          description: Specifies, in points, the newly defined bottom position of
            the specified page box.
          format: float
          type: number
        PageBox:
          $ref: '#/components/schemas/PdfPageBox'
      required:
      - Bottom
      - FileId
      - Left
      - PageRange
      - Right
      - Top
      type: object
    PdfSetPageBoxResponse:
      description: Represents the response to a SetPageBox action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfSetPasswordParameters:
      description: Represents the parameters for an unprotect action.
      example:
        FileId: FileId
        Password: Password
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        Password:
          description: Specifies the password to be used to open the PDF. It can be
            the user or the owner password.
          type: string
      required:
      - FileId
      - Password
      type: object
    PdfSetPasswordResponse:
      description: Represents the response to an unprotect action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfSplitMethod:
      description: Defines the different available methods for splitting a PDF.
      enum:
      - SplitByNumberOfPages
      - SplitByFileSize
      - SplitByTopLevelBookmarks
      type: string
    PdfSplitParameters:
      description: Represents the parameters for a split action.
      example:
        FileId: FileId
        SplitValue: 0
        ImmediateDownload: false
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        SplitMethod:
          $ref: '#/components/schemas/PdfSplitMethod'
        SplitValue:
          description: Specifies, respectively for the SplitByPageCount and SplitByFileSize
            split methods, the number of pages or the maximum size, in kilobytes,
            of the produced files.
          format: int32
          type: integer
        ImmediateDownload:
          default: false
          description: Specifies whether the file(s) created as a result of the action
            shall be available for immediate download.
          type: boolean
      required:
      - FileId
      - SplitMethod
      - SplitValue
      type: object
    PdfSplitResponse:
      description: Represents the response to a split action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
        FileIds:
        - FileIds
        - FileIds
        FileData:
        - FileData
        - FileData
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
        FileIds:
          description: Specifies the identifier(s) of the file(s) created as a result
            of the action.
          items:
            type: string
          nullable: true
          readOnly: true
          type: array
        FileData:
          description: Specifies the data of the file(s) created as a result of the
            action.
          items:
            format: byte
            type: string
          nullable: true
          readOnly: true
          type: array
      type: object
    PdfSwapPagesParameters:
      description: Represents the parameters for a swap pages action.
      example:
        Page1: 0
        Page2: 6
        FileId: FileId
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        Page1:
          description: Specifies the number of the first page.
          format: int32
          type: integer
        Page2:
          description: Specifies the number of the second page.
          format: int32
          type: integer
      required:
      - FileId
      - Page1
      - Page2
      type: object
    PdfSwapPagesResponse:
      description: Represents the response to a swap pages action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    PdfUnprotectParameters:
      description: Represents the parameters for an unprotect action.
      example:
        FileId: FileId
        Password: Password
      properties:
        FileId:
          description: The identifier of the previously uploaded file to be processed.
          type: string
        Password:
          description: Specifies the password to be used to unprotect the PDF.
          type: string
      required:
      - FileId
      - Password
      type: object
    PdfUnprotectResponse:
      description: Represents the response to an unprotect action request.
      example:
        RemainingTokens: 0
        Error:
          InternalErrorId: InternalErrorId
          ExtResultStatus: ExtResultStatus
          ExtResultMessage: ExtResultMessage
      properties:
        Error:
          $ref: '#/components/schemas/Error'
        RemainingTokens:
          description: Specifies the number of remaining tokens.
          format: int64
          type: integer
      type: object
    inline_object:
      properties:
        fileData:
          description: The data of the document.
          format: binary
          type: string
        loadImageParameters:
          $ref: '#/components/schemas/LoadImageParameters'
      required:
      - fileData
      type: object
    inline_object_1:
      properties:
        fileData:
          description: The data of the document.
          format: binary
          type: string
        loadDocumentParameters:
          $ref: '#/components/schemas/PdfLoadDocumentParameters'
      required:
      - fileData
      type: object
  securitySchemes:
    PassportPDFAuthentication:
      description: PassportPDF API Key
      in: header
      name: X-PassportPDF-API-Key
      type: apiKey
