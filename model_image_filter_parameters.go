/*
 * PassportPDF API
 *
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi
// ImageFilterParameters Represents the parameters for an image filtering action.
type ImageFilterParameters struct {
	// The identifier of the previously uploaded file to be processed.
	FileId string `json:"FileId"`
	// Specifies the number of the page, or the range of pages to apply the filter(s) to.
	PageRange string `json:"PageRange"`
	// Specifies an array of filters to be applied.  A maximum of 5 entries is supported.
	Filters []ImageFilters `json:"Filters"`
	// Specifies the left coordinate, in pixel, of the region to process.
	RoiLeft int32 `json:"RoiLeft,omitempty"`
	// Specifies the top coordinate, in pixel, of the region to process.
	RoiTop int32 `json:"RoiTop,omitempty"`
	// Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.
	RoiWidth int32 `json:"RoiWidth,omitempty"`
	// Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.
	RoiHeight int32 `json:"RoiHeight,omitempty"`
	// Specifies the kernel size for the Gaussian filter (if enabled). The size of the square kernel to use. Should be a odd value. For example, a size of 3 will involve 3 * 3 pixels in each pass. The larger the value the more blur you get. The range is larger or equal than 3, and less than the Image's Smaller Dimension (Width, Height) divided by 2. Suggested value is 3 for a [96-120] DPI image and 5 for a [200-250] dpi bitmap.
	GaussianKernelSize int32 `json:"GaussianKernelSize,omitempty"`
	// Size of Edges to become after the unsharp mask effect is applied. It controls how wide they get after the filter is applied. Radius and Amount interact, reducing one, allows more of the other. Minimum Value of Radius should be 3 or more to allow for enough pixels surrounding the edge to be investigated. If value passed less than 3 is passed it will be ammended automatically to 3. Proper value is 5. Value >= 3.
	UnsharpMaskRadius int32 `json:"UnsharpMaskRadius,omitempty"`
	// Amount of Contrast to be added to areas of edges where filter will be applies. It controls how much darker and how much brighter the edges become. Proper value is 0.5, Value between 0.0-5.0.
	UnsharpMaskAmount float64 `json:"UnsharpMaskAmount,omitempty"`
	// Specifies the amount of edges to be sharpened. Smaller values sharpen more, higher values exclude the subtle edges from being sharpened. Proper value is 40. Value between 0-255.
	UnsharpMaskThreshold int32 `json:"UnsharpMaskThreshold,omitempty"`
	// Size of ball rolled under the image. Controlled the amount of subtraction. Value >= 50.
	SubtractBackgroundRollingBallSize int32 `json:"SubtractBackgroundRollingBallSize,omitempty"`
	// Whether a background is lighter or not than the foreground.Value >= true.
	SubtractBackgroundLightBackground bool `json:"SubtractBackgroundLightBackground,omitempty"`
	// Specifies the kernel size for the median filter (if enabled). Level corresponding to number of pixels to include in the median operation, where Level = n, corresponds to (n*2+1)^2 pixels to be included. For Example, KernelSize = 1 includes 9 pixels in the median operation, KernelSize = 2 includes 25 pixels in the median operation. Range from 1 to 60.
	MedianKernelSize int32 `json:"MedianKernelSize,omitempty"`
	// Specifies the kernel size for the minimum filter (if enabled). How large should objects grow in each direction of the four directions, left, right, top, and bottom This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
	MinKernelSize int32 `json:"MinKernelSize,omitempty"`
	// Specifies the kernel size for the maximum filter (if enabled). How much smaller should objects become in each direction of the four directions, left, right, top, and bottom. This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
	MaxKernelSize int32 `json:"MaxKernelSize,omitempty"`
	// Specifies the value for the soften filter (if enabled). Factor between 1 and 100.
	SoftenValue int32 `json:"SoftenValue,omitempty"`
	// Hue for the colorization effect (if enabled) [0..100].
	ColorizeHue float32 `json:"ColorizeHue,omitempty"`
	// Saturation for the colorization effect (if enabled) [0..100].
	ColorizeSaturation float32 `json:"ColorizeSaturation,omitempty"`
	// Luminosity for the colorization effect  (if enabled) [0..100].
	ColorizeLuminosity float32 `json:"ColorizeLuminosity,omitempty"`
}
